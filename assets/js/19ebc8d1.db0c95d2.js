"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[364],{7732:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var i=t(5893),a=t(1151);const s={sidebar_position:4},r="Utils",l={id:"utils",title:"Utils",description:"Internationalization",source:"@site/docs/utils.md",sourceDirName:".",slug:"/utils",permalink:"/getx/docs/utils",draft:!1,unlisted:!1,editUrl:"https://github.com/jonataslaw/getx/docs/utils.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Dependency",permalink:"/getx/docs/pillars/dependency-management"},next:{title:"Community",permalink:"/getx/docs/category/community"}},o={},d=[{value:"Internationalization",id:"internationalization",level:2},{value:"Translations",id:"translations",level:3},{value:"Using translations",id:"using-translations",level:4},{value:"Using translation with singular and plural",id:"using-translation-with-singular-and-plural",level:4},{value:"Using translation with parameters",id:"using-translation-with-parameters",level:4},{value:"Locales",id:"locales",level:3},{value:"Change locale",id:"change-locale",level:4},{value:"System locale",id:"system-locale",level:4},{value:"Change Theme",id:"change-theme",level:2},{value:"GetConnect",id:"getconnect",level:2},{value:"Default configuration",id:"default-configuration",level:3},{value:"Custom configuration",id:"custom-configuration",level:3},{value:"GetPage Middleware",id:"getpage-middleware",level:2},{value:"Priority",id:"priority",level:3},{value:"Redirect",id:"redirect",level:3},{value:"onPageCalled",id:"onpagecalled",level:3},{value:"OnBindingsStart",id:"onbindingsstart",level:3},{value:"OnPageBuildStart",id:"onpagebuildstart",level:3},{value:"OnPageBuilt",id:"onpagebuilt",level:3},{value:"OnPageDispose",id:"onpagedispose",level:3},{value:"Other Advanced APIs",id:"other-advanced-apis",level:2},{value:"Optional Global Settings and Manual configurations",id:"optional-global-settings-and-manual-configurations",level:3},{value:"Local State Widgets",id:"local-state-widgets",level:3},{value:"ValueBuilder",id:"valuebuilder",level:4},{value:"ObxValue",id:"obxvalue",level:4},{value:"Useful tips",id:"useful-tips",level:2},{value:"StateMixin",id:"statemixin",level:2},{value:"GetView",id:"getview",level:4},{value:"GetResponsiveView",id:"getresponsiveview",level:4},{value:"How to use it",id:"how-to-use-it",level:5},{value:"GetWidget",id:"getwidget",level:4},{value:"GetxService",id:"getxservice",level:4},{value:"Tests",id:"tests",level:3},{value:"Tips",id:"tips",level:4},{value:"Mockito or mocktail",id:"mockito-or-mocktail",level:5},{value:"Using Get.reset()",id:"using-getreset",level:5},{value:"Get.testMode",id:"gettestmode",level:5}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"utils",children:"Utils"}),"\n",(0,i.jsx)(n.h2,{id:"internationalization",children:"Internationalization"}),"\n",(0,i.jsx)(n.h3,{id:"translations",children:"Translations"}),"\n",(0,i.jsxs)(n.p,{children:["Translations are kept as a simple key-value dictionary map.\nTo add custom translations, create a class and extend ",(0,i.jsx)(n.code,{children:"Translations"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"import 'package:get/get.dart';\n\nclass Messages extends Translations {\n  @override\n  Map<String, Map<String, String>> get keys => {\n        'en_US': {\n          'hello': 'Hello World',\n        },\n        'de_DE': {\n          'hello': 'Hallo Welt',\n        }\n      };\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"using-translations",children:"Using translations"}),"\n",(0,i.jsxs)(n.p,{children:["Just append ",(0,i.jsx)(n.code,{children:".tr"})," to the specified key and it will be translated, using the current value of ",(0,i.jsx)(n.code,{children:"Get.locale"})," and ",(0,i.jsx)(n.code,{children:"Get.fallbackLocale"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"Text('title'.tr);\n"})}),"\n",(0,i.jsx)(n.h4,{id:"using-translation-with-singular-and-plural",children:"Using translation with singular and plural"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"var products = [];\nText('singularKey'.trPlural('pluralKey', products.length, Args));\n"})}),"\n",(0,i.jsx)(n.h4,{id:"using-translation-with-parameters",children:"Using translation with parameters"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"import 'package:get/get.dart';\n\n\nMap<String, Map<String, String>> get keys => {\n    'en_US': {\n        'logged_in': 'logged in as @name with email @email',\n    },\n    'es_ES': {\n       'logged_in': 'iniciado sesi\xf3n como @name con e-mail @email',\n    }\n};\n\nText('logged_in'.trParams({\n  'name': 'Jhon',\n  'email': 'jhon@example.com'\n  }));\n"})}),"\n",(0,i.jsx)(n.h3,{id:"locales",children:"Locales"}),"\n",(0,i.jsxs)(n.p,{children:["Pass parameters to ",(0,i.jsx)(n.code,{children:"GetMaterialApp"})," to define the locale and translations."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"return GetMaterialApp(\n    translations: Messages(), // your translations\n    locale: Locale('en', 'US'), // translations will be displayed in that locale\n    fallbackLocale: Locale('en', 'UK'), // specify the fallback locale in case an invalid locale is selected.\n);\n"})}),"\n",(0,i.jsx)(n.h4,{id:"change-locale",children:"Change locale"}),"\n",(0,i.jsxs)(n.p,{children:["Call ",(0,i.jsx)(n.code,{children:"Get.updateLocale(locale)"})," to update the locale. Translations then automatically use the new locale."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"var locale = Locale('en', 'US');\nGet.updateLocale(locale);\n"})}),"\n",(0,i.jsx)(n.h4,{id:"system-locale",children:"System locale"}),"\n",(0,i.jsxs)(n.p,{children:["To read the system locale, you could use ",(0,i.jsx)(n.code,{children:"Get.deviceLocale"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"return GetMaterialApp(\n    locale: Get.deviceLocale,\n);\n"})}),"\n",(0,i.jsx)(n.h2,{id:"change-theme",children:"Change Theme"}),"\n",(0,i.jsxs)(n.p,{children:["Please do not use any higher level widget than ",(0,i.jsx)(n.code,{children:"GetMaterialApp"}),' in order to update it. This can trigger duplicate keys. A lot of people are used to the prehistoric approach of creating a "ThemeProvider" widget just to change the theme of your app, and this is definitely NOT necessary with ',(0,i.jsx)(n.strong,{children:"GetX\u2122"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["You can create your custom theme and simply add it within ",(0,i.jsx)(n.code,{children:"Get.changeTheme"})," without any boilerplate for that:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"Get.changeTheme(ThemeData.light());\n"})}),"\n",(0,i.jsxs)(n.p,{children:["If you want to create something like a button that changes the Theme in ",(0,i.jsx)(n.code,{children:"onTap"}),", you can combine two ",(0,i.jsx)(n.strong,{children:"GetX\u2122"})," APIs for that:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The api that checks if the dark ",(0,i.jsx)(n.code,{children:"Theme"})," is being used."]}),"\n",(0,i.jsxs)(n.li,{children:["And the ",(0,i.jsx)(n.code,{children:"Theme"})," Change API, you can just put this within an ",(0,i.jsx)(n.code,{children:"onPressed"}),":"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"Get.changeTheme(Get.isDarkMode? ThemeData.light(): ThemeData.dark());\n"})}),"\n",(0,i.jsxs)(n.p,{children:["When ",(0,i.jsx)(n.code,{children:".darkmode"})," is activated, it will switch to the ",(0,i.jsx)(n.em,{children:"light theme"}),", and when the ",(0,i.jsx)(n.em,{children:"light theme"})," becomes active, it will change to ",(0,i.jsx)(n.em,{children:"dark theme"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"getconnect",children:"GetConnect"}),"\n",(0,i.jsx)(n.p,{children:"GetConnect is an easy way to communicate from your back to your front with http or websockets"}),"\n",(0,i.jsx)(n.h3,{id:"default-configuration",children:"Default configuration"}),"\n",(0,i.jsx)(n.p,{children:"You can simply extend GetConnect and use the GET/POST/PUT/DELETE/SOCKET methods to communicate with your Rest API or websockets."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"class UserProvider extends GetConnect {\n  // Get request\n  Future<Response> getUser(int id) => get('http://youapi/users/$id');\n  // Post request\n  Future<Response> postUser(Map data) => post('http://youapi/users', body: data);\n  // Post request with File\n  Future<Response<CasesModel>> postCases(List<int> image) {\n    final form = FormData({\n      'file': MultipartFile(image, filename: 'avatar.png'),\n      'otherFile': MultipartFile(image, filename: 'cover.png'),\n    });\n    return post('http://youapi/users/upload', form);\n  }\n\n  GetSocket userMessages() {\n    return socket('https://yourapi/users/socket');\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"custom-configuration",children:"Custom configuration"}),"\n",(0,i.jsx)(n.p,{children:"GetConnect is highly customizable You can define base Url, as answer modifiers, as Requests modifiers, define an authenticator, and even the number of attempts in which it will try to authenticate itself, in addition to giving the possibility to define a standard decoder that will transform all your requests into your Models without any additional configuration."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"class HomeProvider extends GetConnect {\n  @override\n  void onInit() {\n    // All request will pass to jsonEncode so CasesModel.fromJson()\n    httpClient.defaultDecoder = CasesModel.fromJson;\n    httpClient.baseUrl = 'https://api.covid19api.com';\n    // baseUrl = 'https://api.covid19api.com'; // It define baseUrl to\n    // Http and websockets if used with no [httpClient] instance\n\n    // It's will attach 'apikey' property on header from all requests\n    httpClient.addRequestModifier((request) {\n      request.headers['apikey'] = '12345678';\n      return request;\n    });\n\n    // Even if the server sends data from the country \"Brazil\",\n    // it will never be displayed to users, because you remove\n    // that data from the response, even before the response is delivered\n    httpClient.addResponseModifier<CasesModel>((request, response) {\n      CasesModel model = response.body;\n      if (model.countries.contains('Brazil')) {\n        model.countries.remove('Brazilll');\n      }\n    });\n\n    httpClient.addAuthenticator((request) async {\n      final response = await get(\"http://yourapi/token\");\n      final token = response.body['token'];\n      // Set the header\n      request.headers['Authorization'] = \"$token\";\n      return request;\n    });\n\n    //Autenticator will be called 3 times if HttpStatus is\n    //HttpStatus.unauthorized\n    httpClient.maxAuthRetries = 3;\n  }\n\n  @override\n  Future<Response<CasesModel>> getCases(String path) => get(path);\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"getpage-middleware",children:"GetPage Middleware"}),"\n",(0,i.jsx)(n.p,{children:"The GetPage has now new property that takes a list of GetMiddleWare and run them in the specific order."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note"}),": When GetPage has a Middlewares, all the children of this page will have the same middlewares automatically."]}),"\n",(0,i.jsx)(n.h3,{id:"priority",children:"Priority"}),"\n",(0,i.jsx)(n.p,{children:"The Order of the Middlewares to run can be set by the priority in the GetMiddleware."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"final middlewares = [\n  GetMiddleware(priority: 2),\n  GetMiddleware(priority: 5),\n  GetMiddleware(priority: 4),\n  GetMiddleware(priority: -8),\n];\n"})}),"\n",(0,i.jsxs)(n.p,{children:["those middlewares will be run in this order ",(0,i.jsx)(n.strong,{children:"-8 => 2 => 4 => 5"})]}),"\n",(0,i.jsx)(n.h3,{id:"redirect",children:"Redirect"}),"\n",(0,i.jsx)(n.p,{children:"This function will be called when the page of the called route is being searched for. It takes RouteSettings as a result to redirect to. Or give it null and there will be no redirecting."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"RouteSettings redirect(String route) {\n  final authService = Get.find<AuthService>();\n  return authService.authed.value ? null : RouteSettings(name: '/login')\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"onpagecalled",children:"onPageCalled"}),"\n",(0,i.jsx)(n.p,{children:"This function will be called when this Page is called before anything created\nyou can use it to change something about the page or give it new page"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"GetPage onPageCalled(GetPage page) {\n  final authService = Get.find<AuthService>();\n  return page.copyWith(title: 'Welcome ${authService.UserName}');\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"onbindingsstart",children:"OnBindingsStart"}),"\n",(0,i.jsx)(n.p,{children:"This function will be called right before the Bindings are initialize.\nHere you can change Bindings for this page."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"List<Bindings> onBindingsStart(List<Bindings> bindings) {\n  final authService = Get.find<AuthService>();\n  if (authService.isAdmin) {\n    bindings.add(AdminBinding());\n  }\n  return bindings;\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"onpagebuildstart",children:"OnPageBuildStart"}),"\n",(0,i.jsx)(n.p,{children:"This function will be called right after the Bindings are initialize.\nHere you can do something after that you created the bindings and before creating the page widget."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"GetPageBuilder onPageBuildStart(GetPageBuilder page) {\n  print('bindings are ready');\n  return page;\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"onpagebuilt",children:"OnPageBuilt"}),"\n",(0,i.jsx)(n.p,{children:"This function will be called right after the GetPage.page function is called and will give you the result of the function. and take the widget that will be showed."}),"\n",(0,i.jsx)(n.h3,{id:"onpagedispose",children:"OnPageDispose"}),"\n",(0,i.jsx)(n.p,{children:"This function will be called right after disposing all the related objects (Controllers, views, ...) of the page."}),"\n",(0,i.jsx)(n.h2,{id:"other-advanced-apis",children:"Other Advanced APIs"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"// give the current args from currentScreen\nGet.arguments\n\n// give name of previous route\nGet.previousRoute\n\n// give the raw route to access for example, rawRoute.isFirst()\nGet.rawRoute\n\n// give access to Routing API from GetObserver\nGet.routing\n\n// check if snackbar is open\nGet.isSnackbarOpen\n\n// check if dialog is open\nGet.isDialogOpen\n\n// check if bottomsheet is open\nGet.isBottomSheetOpen\n\n// remove one route.\nGet.removeRoute()\n\n// back repeatedly until the predicate returns true.\nGet.until()\n\n// go to next route and remove all the previous routes until the predicate returns true.\nGet.offUntil()\n\n// go to next named route and remove all the previous routes until the predicate returns true.\nGet.offNamedUntil()\n\n//Check in what platform the app is running\nGetPlatform.isAndroid\nGetPlatform.isIOS\nGetPlatform.isMacOS\nGetPlatform.isWindows\nGetPlatform.isLinux\nGetPlatform.isFuchsia\n\n//Check the device type\nGetPlatform.isMobile\nGetPlatform.isDesktop\n//All platforms are supported independently in web!\n//You can tell if you are running inside a browser\n//on Windows, iOS, OSX, Android, etc.\nGetPlatform.isWeb\n\n\n// Equivalent to : MediaQuery.of(context).size.height,\n// but immutable.\nGet.height\nGet.width\n\n// Gives the current context of the Navigator.\nGet.context\n\n// Gives the context of the snackbar/dialog/bottomsheet in the foreground, anywhere in your code.\nGet.contextOverlay\n\n// Note: the following methods are extensions on context. Since you\n// have access to context in any place of your UI, you can use it anywhere in the UI code\n\n// If you need a changeable height/width (like Desktop or browser windows that can be scaled) you will need to use context.\ncontext.width\ncontext.height\n\n// Gives you the power to define half the screen, a third of it and so on.\n// Useful for responsive applications.\n// param dividedBy (double) optional - default: 1\n// param reducedBy (double) optional - default: 0\ncontext.heightTransformer()\ncontext.widthTransformer()\n\n/// Similar to MediaQuery.sizeOf(context);\ncontext.mediaQuerySize()\n\n/// Similar to MediaQuery.paddingOf(context);\ncontext.mediaQueryPadding()\n\n/// Similar to MediaQuery.viewPaddingOf(context);\ncontext.mediaQueryViewPadding()\n\n/// Similar to MediaQuery.viewInsetsOf(context);\ncontext.mediaQueryViewInsets()\n\n/// Similar to MediaQuery.orientationOf(context);\ncontext.orientation()\n\n/// Check if device is on landscape mode\ncontext.isLandscape()\n\n/// Check if device is on portrait mode\ncontext.isPortrait()\n\n/// Similar to MediaQuery.devicePixelRatioOf(context);\ncontext.devicePixelRatio()\n\n/// Similar to MediaQuery.textScaleFactorOf(context);\ncontext.textScaleFactor()\n\n/// Get the shortestSide from screen\ncontext.mediaQueryShortestSide()\n\n/// True if width be larger than 800\ncontext.showNavbar()\n\n/// True if the shortestSide is smaller than 600p\ncontext.isPhone()\n\n/// True if the shortestSide is largest than 600p\ncontext.isSmallTablet()\n\n/// True if the shortestSide is largest than 720p\ncontext.isLargeTablet()\n\n/// True if the current device is Tablet\ncontext.isTablet()\n\n/// Returns a value<T> according to the screen size\n/// can give value for:\n/// watch: if the shortestSide is smaller than 300\n/// mobile: if the shortestSide is smaller than 600\n/// tablet: if the shortestSide is smaller than 1200\n/// desktop: if width is largest than 1200\ncontext.responsiveValue<T>()\n"})}),"\n",(0,i.jsx)(n.h3,{id:"optional-global-settings-and-manual-configurations",children:"Optional Global Settings and Manual configurations"}),"\n",(0,i.jsx)(n.p,{children:"GetMaterialApp configures everything for you, but if you want to configure Get manually."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"MaterialApp(\n  navigatorKey: Get.key,\n  navigatorObservers: [GetObserver()],\n);\n"})}),"\n",(0,i.jsxs)(n.p,{children:["You will also be able to use your own Middleware within ",(0,i.jsx)(n.code,{children:"GetObserver"}),", this will not influence anything."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"MaterialApp(\n  navigatorKey: Get.key,\n  navigatorObservers: [\n    GetObserver(MiddleWare.observer) // Here\n  ],\n);\n"})}),"\n",(0,i.jsxs)(n.p,{children:["You can create ",(0,i.jsx)(n.em,{children:"Global Settings"})," for ",(0,i.jsx)(n.code,{children:"Get"}),". Just add ",(0,i.jsx)(n.code,{children:"Get.config"})," to your code before pushing any route.\nOr do it directly in your ",(0,i.jsx)(n.code,{children:"GetMaterialApp"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"GetMaterialApp(\n  enableLog: true,\n  defaultTransition: Transition.fade,\n  opaqueRoute: Get.isOpaqueRouteDefault,\n  popGesture: Get.isPopGestureEnable,\n  transitionDuration: Get.defaultDurationTransition,\n  defaultGlobalState: Get.defaultGlobalState,\n);\n\nGet.config(\n  enableLog = true,\n  defaultPopGesture = true,\n  defaultTransition = Transitions.cupertino\n)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["You can optionally redirect all the logging messages from ",(0,i.jsx)(n.code,{children:"Get"}),".\nIf you want to use your own, favourite logging package,\nand want to capture the logs there:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"GetMaterialApp(\n  enableLog: true,\n  logWriterCallback: localLogWriter,\n);\n\nvoid localLogWriter(String text, {bool isError = false}) {\n  // pass the message to your favourite logging package here\n  // please note that even if enableLog: false log messages will be pushed in this callback\n  // you get check the flag if you want through GetConfig.isLogEnable\n}\n\n"})}),"\n",(0,i.jsx)(n.h3,{id:"local-state-widgets",children:"Local State Widgets"}),"\n",(0,i.jsxs)(n.p,{children:["These Widgets allows you to manage a single value, and keep the state ephemeral and locally.\nWe have flavours for Reactive and Simple.\nFor instance, you might use them to toggle obscureText in a ",(0,i.jsx)(n.code,{children:"TextField"}),", maybe create a custom\nExpandable Panel, or maybe modify the current index in ",(0,i.jsx)(n.code,{children:"BottomNavigationBar"})," while changing the content\nof the body in a ",(0,i.jsx)(n.code,{children:"Scaffold"}),"."]}),"\n",(0,i.jsx)(n.h4,{id:"valuebuilder",children:"ValueBuilder"}),"\n",(0,i.jsxs)(n.p,{children:["A simplification of ",(0,i.jsx)(n.code,{children:"StatefulWidget"})," that works with a ",(0,i.jsx)(n.code,{children:".setState"})," callback that takes the updated value."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:'ValueBuilder<bool>(\n  initialValue: false,\n  builder: (value, updateFn) => Switch(\n    value: value,\n    onChanged: updateFn, // same signature! you could use ( newValue ) => updateFn( newValue )\n  ),\n  // if you need to call something outside the builder method.\n  onUpdate: (value) => print("Value updated: $value"),\n  onDispose: () => print("Widget unmounted"),\n),\n'})}),"\n",(0,i.jsx)(n.h4,{id:"obxvalue",children:"ObxValue"}),"\n",(0,i.jsxs)(n.p,{children:["Similar to ",(0,i.jsx)(n.a,{href:"#valuebuilder",children:(0,i.jsx)(n.code,{children:"ValueBuilder"})}),", but this is the Reactive version, you pass a Rx instance (remember the magical .obs?) and\nupdates automatically... isn't it awesome?"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"ObxValue((data) => Switch(\n        value: data.value,\n        onChanged: data, // Rx has a _callable_ function! You could use (flag) => data.value = flag,\n    ),\n    false.obs,\n),\n"})}),"\n",(0,i.jsx)(n.h2,{id:"useful-tips",children:"Useful tips"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:".obs"}),"ervables (also known as ",(0,i.jsx)(n.em,{children:"Rx"})," Types) have a wide variety of internal methods and operators."]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Is very common to ",(0,i.jsx)(n.em,{children:"believe"})," that a property with ",(0,i.jsx)(n.code,{children:".obs"})," ",(0,i.jsx)(n.strong,{children:"IS"})," the actual value... but make no mistake!\nWe avoid the Type declaration of the variable, because Dart's compiler is smart enough, and the code\nlooks cleaner, but:"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"var message = 'Hello world'.obs;\nprint( 'Message \"$message\" has Type ${message.runtimeType}');\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Even if ",(0,i.jsx)(n.code,{children:"message"})," ",(0,i.jsx)(n.em,{children:"prints"})," the actual String value, the Type is ",(0,i.jsx)(n.strong,{children:"RxString"}),"!"]}),"\n",(0,i.jsxs)(n.p,{children:["So, you can't do ",(0,i.jsx)(n.code,{children:"message.substring( 0, 4 )"}),".\nYou have to access the real ",(0,i.jsx)(n.code,{children:"value"})," inside the ",(0,i.jsx)(n.em,{children:"observable"}),':\nThe most "used way" is ',(0,i.jsx)(n.code,{children:".value"}),", but, did you know that you can also use..."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"final name = 'GetX'.obs;\n// only \"updates\" the stream, if the value is different from the current one.\nname.value = 'Hey';\n\n// All Rx properties are \"callable\" and returns the new value.\n// but this approach does not accepts `null`, the UI will not rebuild.\nname('Hello');\n\n// is like a getter, prints 'Hello'.\nname() ;\n\n/// numbers:\n\nfinal count = 0.obs;\n\n// You can use all non mutable operations from num primitives!\ncount + 1;\n\n// Watch out! this is only valid if `count` is not final, but var\ncount += 1;\n\n// You can also compare against values:\ncount > 2;\n\n/// booleans:\n\nfinal flag = false.obs;\n\n// switches the value between true/false\nflag.toggle();\n\n\n/// all types:\n\n// Sets the `value` to null.\nflag.nil();\n\n// All toString(), toJson() operations are passed down to the `value`\nprint( count ); // calls `toString()` inside  for RxInt\n\nfinal abc = [0,1,2].obs;\n// Converts the value to a json Array, prints RxList\n// Json is supported by all Rx types!\nprint('json: ${jsonEncode(abc)}, type: ${abc.runtimeType}');\n\n// RxMap, RxList and RxSet are special Rx types, that extends their native types.\n// but you can work with a List as a regular list, although is reactive!\nabc.add(12); // pushes 12 to the list, and UPDATES the stream.\nabc[3]; // like Lists, reads the index 3.\n\n\n// equality works with the Rx and the value, but hashCode is always taken from the value\nfinal number = 12.obs;\nprint( number == 12 ); // prints > true\n\n/// Custom Rx Models:\n\n// toJson(), toString() are deferred to the child, so you can implement override on them, and print() the observable directly.\n\nclass User {\n    String name, last;\n    int age;\n    User({this.name, this.last, this.age});\n\n    @override\n    String toString() => '$name $last, $age years old';\n}\n\nfinal user = User(name: 'John', last: 'Doe', age: 33).obs;\n\n// `user` is \"reactive\", but the properties inside ARE NOT!\n// So, if we change some variable inside of it...\nuser.value.name = 'Roi';\n// The widget will not rebuild!,\n// `Rx` don't have any clue when you change something inside user.\n// So, for custom classes, we need to manually \"notify\" the change.\nuser.refresh();\n\n// or we can use the `update()` method!\nuser.update((value){\n  value.name='Roi';\n});\n\nprint( user );\n"})}),"\n",(0,i.jsx)(n.h2,{id:"statemixin",children:"StateMixin"}),"\n",(0,i.jsxs)(n.p,{children:["Another way to handle your ",(0,i.jsx)(n.code,{children:"UI"})," state is use the ",(0,i.jsx)(n.code,{children:"StateMixin<T>"})," .\nTo implement it, use the ",(0,i.jsx)(n.code,{children:"with"})," to add the ",(0,i.jsx)(n.code,{children:"StateMixin<T>"}),"\nto your controller which allows a T model."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"class Controller extends GetController with StateMixin<User>{}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"change()"})," method change the State whenever we want.\nJust pass the data and the status in this way:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"change(data, status: RxStatus.success());\n"})}),"\n",(0,i.jsx)(n.p,{children:"RxStatus allow these status:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"RxStatus.loading();\nRxStatus.success();\nRxStatus.empty();\nRxStatus.error('message');\n"})}),"\n",(0,i.jsx)(n.p,{children:"To represent it in the UI, use:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"class OtherClass extends GetView<Controller> {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n\n      body: controller.obx(\n        (state)=>Text(state.name),\n        \n        // here you can put your custom loading indicator, but\n        // by default would be Center(child:CircularProgressIndicator())\n        onLoading: CustomLoadingIndicator(),\n        onEmpty: Text('No data found'),\n\n        // here also you can set your own error widget, but by\n        // default will be an Center(child:Text(error))\n        onError: (error)=>Text(error),\n      ),\n    );\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"getview",children:"GetView"}),"\n",(0,i.jsx)(n.p,{children:"I love this Widget, is so simple, yet, so useful!"}),"\n",(0,i.jsxs)(n.p,{children:["Is a ",(0,i.jsx)(n.code,{children:"const Stateless"})," Widget that has a getter ",(0,i.jsx)(n.code,{children:"controller"})," for a registered ",(0,i.jsx)(n.code,{children:"Controller"}),", that's all."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:" class AwesomeController extends GetController {\n   final String title = 'My Awesome View';\n }\n\n  // ALWAYS remember to pass the `Type` you used to register your controller!\n class AwesomeView extends GetView<AwesomeController> {\n   @override\n   Widget build(BuildContext context) {\n     return Container(\n       padding: EdgeInsets.all(20),\n       child: Text(controller.title), // just call `controller.something`\n     );\n   }\n }\n"})}),"\n",(0,i.jsx)(n.h4,{id:"getresponsiveview",children:"GetResponsiveView"}),"\n",(0,i.jsxs)(n.p,{children:["Extend this widget to build responsive view.\nthis widget contains the ",(0,i.jsx)(n.code,{children:"screen"})," property that have all\ninformation about the screen size and type."]}),"\n",(0,i.jsx)(n.h5,{id:"how-to-use-it",children:"How to use it"}),"\n",(0,i.jsx)(n.p,{children:"You have two options to build it."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["with ",(0,i.jsx)(n.code,{children:"builder"})," method you return the widget to build."]}),"\n",(0,i.jsxs)(n.li,{children:["with methods ",(0,i.jsx)(n.code,{children:"desktop"}),", ",(0,i.jsx)(n.code,{children:"tablet"}),",",(0,i.jsx)(n.code,{children:"phone"}),", ",(0,i.jsx)(n.code,{children:"watch"}),". the specific\nmethod will be built when the screen type matches the method\nwhen the screen is [ScreenType.Tablet] the ",(0,i.jsx)(n.code,{children:"tablet"})," method\nwill be exuded and so on.\n",(0,i.jsx)(n.strong,{children:"Note:"})," If you use this method please set the property ",(0,i.jsx)(n.code,{children:"alwaysUseBuilder"})," to ",(0,i.jsx)(n.code,{children:"false"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["With ",(0,i.jsx)(n.code,{children:"settings"})," property you can set the width limit for the screen types."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.img,{src:"https://github.com/SchabanBo/get_page_example/blob/master/docs/Example.gif?raw=true",alt:"example"}),"\nCode to this screen\n",(0,i.jsx)(n.a,{href:"https://github.com/SchabanBo/get_page_example/blob/master/lib/pages/responsive_example/responsive_view.dart",children:"code"})]}),"\n",(0,i.jsx)(n.h4,{id:"getwidget",children:"GetWidget"}),"\n",(0,i.jsxs)(n.p,{children:["Most people have no idea about this Widget, or totally confuse the usage of it.\nThe use case is very rare, but very specific: It ",(0,i.jsx)(n.code,{children:"caches"})," a Controller.\nBecause of the ",(0,i.jsx)(n.em,{children:"cache"}),", can't be a ",(0,i.jsx)(n.code,{children:"const Stateless"}),"."]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:'So, when do you need to "cache" a Controller?'}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:['If you use, another "not so common" feature of ',(0,i.jsx)(n.strong,{children:"GetX"}),": ",(0,i.jsx)(n.code,{children:"Get.create()"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Get.create(()=>Controller())"})," will generate a new ",(0,i.jsx)(n.code,{children:"Controller"})," each time you call\n",(0,i.jsx)(n.code,{children:"Get.find<Controller>()"}),","]}),"\n",(0,i.jsxs)(n.p,{children:["That's where ",(0,i.jsx)(n.code,{children:"GetWidget"}),' shines... as you can use it, for example,\nto keep a list of Todo items. So, if the widget gets "rebuilt", it will keep the same controller instance.']}),"\n",(0,i.jsx)(n.h4,{id:"getxservice",children:"GetxService"}),"\n",(0,i.jsxs)(n.p,{children:["This class is like a ",(0,i.jsx)(n.code,{children:"GetxController"}),", it shares the same lifecycle ( ",(0,i.jsx)(n.code,{children:"onInit()"}),", ",(0,i.jsx)(n.code,{children:"onReady()"}),", ",(0,i.jsx)(n.code,{children:"onClose()"}),').\nBut has no "logic" inside of it. It just notifies ',(0,i.jsx)(n.strong,{children:"GetX"})," Dependency Injection system, that this subclass\n",(0,i.jsx)(n.strong,{children:"can not"})," be removed from memory."]}),"\n",(0,i.jsxs)(n.p,{children:['So is super useful to keep your "Services" always reachable and active with ',(0,i.jsx)(n.code,{children:"Get.find()"}),". Like:\n",(0,i.jsx)(n.code,{children:"ApiService"}),", ",(0,i.jsx)(n.code,{children:"StorageService"}),", ",(0,i.jsx)(n.code,{children:"CacheService"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"Future<void> main() async {\n  await initServices(); /// AWAIT SERVICES INITIALIZATION.\n  runApp(SomeApp());\n}\n\n/// Is a smart move to make your Services intiialize before you run the Flutter app.\n/// as you can control the execution flow (maybe you need to load some Theme configuration,\n/// apiKey, language defined by the User... so load SettingService before running ApiService.\n/// so GetMaterialApp() doesnt have to rebuild, and takes the values directly.\nvoid initServices() async {\n  print('starting services ...');\n  /// Here is where you put get_storage, hive, shared_pref initialization.\n  /// or moor connection, or whatever that's async.\n  await Get.putAsync(() => DbService().init());\n  await Get.putAsync(SettingsService()).init();\n  print('All services started...');\n}\n\nclass DbService extends GetxService {\n  Future<DbService> init() async {\n    print('$runtimeType delays 2 sec');\n    await 2.delay();\n    print('$runtimeType ready!');\n    return this;\n  }\n}\n\nclass SettingsService extends GetxService {\n  void init() async {\n    print('$runtimeType delays 1 sec');\n    await 1.delay();\n    print('$runtimeType ready!');\n  }\n}\n\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The only way to actually delete a ",(0,i.jsx)(n.code,{children:"GetxService"}),", is with ",(0,i.jsx)(n.code,{children:"Get.reset()"}),' which is like a\n"Hot Reboot" of your app. So remember, if you need absolute persistence of a class instance during the\nlifetime of your app, use ',(0,i.jsx)(n.code,{children:"GetxService"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"tests",children:"Tests"}),"\n",(0,i.jsx)(n.p,{children:"You can test your controllers like any other class, including their lifecycles:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"class Controller extends GetxController {\n  @override\n  void onInit() {\n    super.onInit();\n    //Change value to name2\n    name.value = 'name2';\n  }\n\n  @override\n  void onClose() {\n    name.value = '';\n    super.onClose();\n  }\n\n  final name = 'name1'.obs;\n\n  void changeName() => name.value = 'name3';\n}\n\nvoid main() {\n  test('''\nTest the state of the reactive variable \"name\" across all of its lifecycles''',\n      () {\n    /// You can test the controller without the lifecycle,\n    /// but it's not recommended unless you're not using\n    ///  GetX dependency injection\n    final controller = Controller();\n    expect(controller.name.value, 'name1');\n\n    /// If you are using it, you can test everything,\n    /// including the state of the application after each lifecycle.\n    Get.put(controller); // onInit was called\n    expect(controller.name.value, 'name2');\n\n    /// Test your functions\n    controller.changeName();\n    expect(controller.name.value, 'name3');\n\n    /// onClose was called\n    Get.delete<Controller>();\n\n    expect(controller.name.value, '');\n  });\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"tips",children:"Tips"}),"\n",(0,i.jsx)(n.h5,{id:"mockito-or-mocktail",children:"Mockito or mocktail"}),"\n",(0,i.jsx)(n.p,{children:"If you need to mock your GetxController/GetxService, you should extend GetxController, and mixin it with Mock, that way"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"class NotificationServiceMock extends GetxService with Mock implements NotificationService {}\n"})}),"\n",(0,i.jsx)(n.h5,{id:"using-getreset",children:"Using Get.reset()"}),"\n",(0,i.jsx)(n.p,{children:"If you are testing widgets, or test groups, use Get.reset at the end of your test or in tearDown to reset all settings from your previous test."}),"\n",(0,i.jsx)(n.h5,{id:"gettestmode",children:"Get.testMode"}),"\n",(0,i.jsxs)(n.p,{children:["if you are using your navigation in your controllers, use ",(0,i.jsx)(n.code,{children:"Get.testMode = true"})," at the beginning of your main."]}),"\n",(0,i.jsx)(n.h1,{id:"breaking-changes-from-20",children:"Breaking changes from 2.0"}),"\n",(0,i.jsx)(n.p,{children:"1- Rx types:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Before"}),(0,i.jsx)(n.th,{children:"After"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"StringX"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"RxString"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"IntX"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"RxInt"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"MapX"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"RxMap"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"ListX"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"RxList"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"NumX"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"RxNum"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"DoubleX"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"RxDouble"})})]})]})]}),"\n",(0,i.jsx)(n.p,{children:"RxController and GetBuilder now have merged, you no longer need to memorize which controller you want to use, just use GetxController, it will work for simple state management and for reactive as well."}),"\n",(0,i.jsx)(n.p,{children:"2- NamedRoutes\nBefore:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"GetMaterialApp(\n  namedRoutes: {\n    '/': GetRoute(page: Home()),\n  }\n)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Now:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"GetMaterialApp(\n  getPages: [\n    GetPage(name: '/', page: () => Home()),\n  ]\n)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Why this change?\nOften, it may be necessary to decide which page will be displayed from a parameter, or a login token, the previous approach was inflexible, as it did not allow this.\nInserting the page into a function has significantly reduced the RAM consumption, since the routes will not be allocated in memory since the app was started, and it also allowed to do this type of approach:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"\nGetStorage box = GetStorage();\n\nGetMaterialApp(\n  getPages: [\n    GetPage(name: '/', page:(){\n      return box.hasData('token') ? Home() : Login();\n    })\n  ]\n)\n"})})]})}function h(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>l,a:()=>r});var i=t(7294);const a={},s=i.createContext(a);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);