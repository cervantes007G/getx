"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[195],{4811:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var a=t(5893),o=t(1151);const r={sidebar_position:2},i="Route",s={id:"pillars/route-management",title:"Route",description:"This is the complete explanation of all there is to Getx when the matter is route management.",source:"@site/docs/pillars/route-management.md",sourceDirName:"pillars",slug:"/pillars/route-management",permalink:"/getx/docs/pillars/route-management",draft:!1,unlisted:!1,editUrl:"https://github.com/jonataslaw/getx/docs/pillars/route-management.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"State",permalink:"/getx/docs/pillars/state-management"},next:{title:"Dependency",permalink:"/getx/docs/pillars/dependency-management"}},l={},d=[{value:"How to use",id:"how-to-use",level:2},{value:"Navigation without named routes",id:"navigation-without-named-routes",level:2},{value:"Navigation with named routes",id:"navigation-with-named-routes",level:2},{value:"Send data to named Routes",id:"send-data-to-named-routes",level:3},{value:"Dynamic urls links",id:"dynamic-urls-links",level:3},{value:"Middleware",id:"middleware",level:3},{value:"Navigation without context",id:"navigation-without-context",level:2},{value:"SnackBars",id:"snackbars",level:3},{value:"Dialogs",id:"dialogs",level:3},{value:"BottomSheets",id:"bottomsheets",level:3},{value:"Nested Navigation",id:"nested-navigation",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"route",children:"Route"}),"\n",(0,a.jsx)(n.p,{children:"This is the complete explanation of all there is to Getx when the matter is route management."}),"\n",(0,a.jsx)(n.h2,{id:"how-to-use",children:"How to use"}),"\n",(0,a.jsx)(n.p,{children:"Add this to your pubspec.yaml file:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"dependencies:\n  get:\n"})}),"\n",(0,a.jsx)(n.p,{children:'If you are going to use routes/snackbars/dialogs/bottomsheets without context, or use the high-level Get APIs, you need to simply add "Get" before your MaterialApp, turning it into GetMaterialApp and enjoy!'}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"GetMaterialApp( // Before: MaterialApp(\n  home: MyHome(),\n)\n"})}),"\n",(0,a.jsx)(n.h2,{id:"navigation-without-named-routes",children:"Navigation without named routes"}),"\n",(0,a.jsx)(n.p,{children:"To navigate to a new screen:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"Get.to(NextScreen());\n"})}),"\n",(0,a.jsx)(n.p,{children:"To close snackbars, dialogs, bottomsheets, or anything you would normally close with Navigator.pop(context);"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"Get.back();\n"})}),"\n",(0,a.jsx)(n.p,{children:"To go to the next screen and no option to go back to the previous screen (for use in SplashScreens, login screens and etc.)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"Get.off(NextScreen());\n"})}),"\n",(0,a.jsx)(n.p,{children:"To go to the next screen and cancel all previous routes (useful in shopping carts, polls, and tests)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"Get.offAll(NextScreen());\n"})}),"\n",(0,a.jsx)(n.p,{children:"To navigate to the next route, and receive or update data as soon as you return from it:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"var data = await Get.to(Payment());\n"})}),"\n",(0,a.jsx)(n.p,{children:"on other screen, send a data for previous route:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"Get.back(result: 'success');\n"})}),"\n",(0,a.jsx)(n.p,{children:"And use it:"}),"\n",(0,a.jsx)(n.p,{children:"ex:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"if(data == 'success') madeAnything();\n"})}),"\n",(0,a.jsx)(n.p,{children:"Don't you want to learn our syntax?\nJust change the Navigator (uppercase) to navigator (lowercase), and you will have all the functions of the standard navigation, without having to use context\nExample:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"\n// Default Flutter navigator\nNavigator.of(context).push(\n  context,\n  MaterialPageRoute(\n    builder: (BuildContext context) {\n      return HomePage();\n    },\n  ),\n);\n\n// Get using Flutter syntax without needing context\nnavigator.push(\n  MaterialPageRoute(\n    builder: (_) {\n      return HomePage();\n    },\n  ),\n);\n\n// Get syntax (It is much better, but you have the right to disagree)\nGet.to(HomePage());\n\n\n"})}),"\n",(0,a.jsx)(n.h2,{id:"navigation-with-named-routes",children:"Navigation with named routes"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"If you prefer to navigate by namedRoutes, Get also supports this."}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"To navigate to nextScreen"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:'Get.toNamed("/NextScreen");\n'})}),"\n",(0,a.jsx)(n.p,{children:"To navigate and remove the previous screen from the tree."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:'Get.offNamed("/NextScreen");\n'})}),"\n",(0,a.jsx)(n.p,{children:"To navigate and remove all previous screens from the tree."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:'Get.offAllNamed("/NextScreen");\n'})}),"\n",(0,a.jsx)(n.p,{children:"To define routes, use GetMaterialApp:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"void main() {\n  runApp(\n    GetMaterialApp(\n      initialRoute: '/',\n      getPages: [\n        GetPage(name: '/', page: () => MyHomePage()),\n        GetPage(name: '/second', page: () => Second()),\n        GetPage(\n          name: '/third',\n          page: () => Third(),\n          transition: Transition.zoom  \n        ),\n      ],\n    )\n  );\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"To handle navigation to non-defined routes (404 error), you can define an unknownRoute page in GetMaterialApp."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"void main() {\n  runApp(\n    GetMaterialApp(\n      unknownRoute: GetPage(name: '/notfound', page: () => UnknownRoutePage()),\n      initialRoute: '/',\n      getPages: [\n        GetPage(name: '/', page: () => MyHomePage()),\n        GetPage(name: '/second', page: () => Second()),\n      ],\n    )\n  );\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"send-data-to-named-routes",children:"Send data to named Routes"}),"\n",(0,a.jsx)(n.p,{children:"Just send what you want for arguments. Get accepts anything here, whether it is a String, a Map, a List, or even a class instance."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"Get.toNamed(\"/NextScreen\", arguments: 'Get is the best');\n"})}),"\n",(0,a.jsx)(n.p,{children:"on your class or controller:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"print(Get.arguments);\n//print out: Get is the best\n"})}),"\n",(0,a.jsx)(n.h3,{id:"dynamic-urls-links",children:"Dynamic urls links"}),"\n",(0,a.jsx)(n.p,{children:"Get offer advanced dynamic urls just like on the Web. Web developers have probably already wanted this feature on Flutter, and most likely have seen a package promise this feature and deliver a totally different syntax than a URL would have on web, but Get also solves that."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:'Get.offAllNamed("/NextScreen?device=phone&id=354&name=Enzo");\n'})}),"\n",(0,a.jsx)(n.p,{children:"on your controller/bloc/stateful/stateless class:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"print(Get.parameters['id']);\n// out: 354\nprint(Get.parameters['name']);\n// out: Enzo\n"})}),"\n",(0,a.jsx)(n.p,{children:"You can also receive NamedParameters with Get easily:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"void main() {\n  runApp(\n    GetMaterialApp(\n      initialRoute: '/',\n      getPages: [\n      GetPage(\n        name: '/',\n        page: () => MyHomePage(),\n      ),\n      GetPage(\n        name: '/profile/',\n        page: () => MyProfile(),\n      ),\n       //You can define a different page for routes with arguments, and another without arguments, but for that you must use the slash '/' on the route that will not receive arguments as above.\n       GetPage(\n        name: '/profile/:user',\n        page: () => UserProfile(),\n      ),\n      GetPage(\n        name: '/third',\n        page: () => Third(),\n        transition: Transition.cupertino  \n      ),\n     ],\n    )\n  );\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"Send data on route name"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:'Get.toNamed("/profile/34954");\n'})}),"\n",(0,a.jsx)(n.p,{children:"On second screen take the data by parameter"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"print(Get.parameters['user']);\n// out: 34954\n"})}),"\n",(0,a.jsx)(n.p,{children:"or send multiple parameters like this"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:'Get.toNamed("/profile/34954?flag=true&country=italy");\n'})}),"\n",(0,a.jsx)(n.p,{children:"or"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:'var parameters = <String, String>{"flag": "true","country": "italy",};\nGet.toNamed("/profile/34954", parameters: parameters);\n'})}),"\n",(0,a.jsx)(n.p,{children:"On second screen take the data by parameters as usually"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"print(Get.parameters['user']);\nprint(Get.parameters['flag']);\nprint(Get.parameters['country']);\n// out: 34954 true italy\n"})}),"\n",(0,a.jsx)(n.p,{children:"And now, all you need to do is use Get.toNamed() to navigate your named routes, without any context (you can call your routes directly from your BLoC or Controller class), and when your app is compiled to the web, your routes will appear in the url < 3"}),"\n",(0,a.jsx)(n.h3,{id:"middleware",children:"Middleware"}),"\n",(0,a.jsx)(n.p,{children:"If you want to listen Get events to trigger actions, you can to use routingCallback to it"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"GetMaterialApp(\n  routingCallback: (routing) {\n    if(routing.current == '/second'){\n      openAds();\n    }\n  }\n)\n"})}),"\n",(0,a.jsx)(n.p,{children:"If you are not using GetMaterialApp, you can use the manual API to attach Middleware observer."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:'void main() {\n  runApp(\n    MaterialApp(\n      onGenerateRoute: Router.generateRoute,\n      initialRoute: "/",\n      navigatorKey: Get.key,\n      navigatorObservers: [\n        GetObserver(MiddleWare.observer), // HERE !!!\n      ],\n    ),\n  );\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"Create a MiddleWare class"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"class MiddleWare {\n  static observer(Routing routing) {\n    /// You can listen in addition to the routes, the snackbars, dialogs and bottomsheets on each screen.\n    ///If you need to enter any of these 3 events directly here,\n    ///you must specify that the event is != Than you are trying to do.\n    if (routing.current == '/second' && !routing.isSnackbar) {\n      Get.snackbar(\"Hi\", \"You are on second route\");\n    } else if (routing.current =='/third'){\n      print('last route called');\n    }\n  }\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"Now, use Get on your code:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:'class First extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        leading: IconButton(\n          icon: Icon(Icons.add),\n          onPressed: () {\n            Get.snackbar("hi", "i am a modern snackbar");\n          },\n        ),\n        title: Text(\'First Route\'),\n      ),\n      body: Center(\n        child: ElevatedButton(\n          child: Text(\'Open route\'),\n          onPressed: () {\n            Get.toNamed("/second");\n          },\n        ),\n      ),\n    );\n  }\n}\n\nclass Second extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        leading: IconButton(\n          icon: Icon(Icons.add),\n          onPressed: () {\n            Get.snackbar("hi", "i am a modern snackbar");\n          },\n        ),\n        title: Text(\'second Route\'),\n      ),\n      body: Center(\n        child: ElevatedButton(\n          child: Text(\'Open route\'),\n          onPressed: () {\n            Get.toNamed("/third");\n          },\n        ),\n      ),\n    );\n  }\n}\n\nclass Third extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text("Third Route"),\n      ),\n      body: Center(\n        child: ElevatedButton(\n          onPressed: () {\n            Get.back();\n          },\n          child: Text(\'Go back!\'),\n        ),\n      ),\n    );\n  }\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"navigation-without-context",children:"Navigation without context"}),"\n",(0,a.jsx)(n.h3,{id:"snackbars",children:"SnackBars"}),"\n",(0,a.jsx)(n.p,{children:"To have a simple SnackBar with Flutter, you must get the context of Scaffold, or you must use a GlobalKey attached to your Scaffold"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"final snackBar = SnackBar(\n  content: Text('Hi!'),\n  action: SnackBarAction(\n    label: 'I am a old and ugly snackbar :(',\n    onPressed: (){}\n  ),\n);\n// Find the Scaffold in the widget tree and use\n// it to show a SnackBar.\nScaffold.of(context).showSnackBar(snackBar);\n"})}),"\n",(0,a.jsx)(n.p,{children:"With Get:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"Get.snackbar('Hi', 'i am a modern snackbar');\n"})}),"\n",(0,a.jsx)(n.p,{children:"With Get, all you have to do is call your Get.snackbar from anywhere in your code or customize it however you want!"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:'Get.snackbar(\n  "Hey i\'m a Get SnackBar!", // title\n  "It\'s unbelievable! I\'m using SnackBar without context, without boilerplate, without Scaffold, it is something truly amazing!", // message\n  icon: Icon(Icons.alarm),\n  shouldIconPulse: true,\n  onTap:(){},\n  barBlur: 20,\n  isDismissible: true,\n  duration: Duration(seconds: 3),\n);\n\n\n  ////////// ALL FEATURES //////////\n  //     Color colorText,\n  //     Duration duration,\n  //     SnackPosition snackPosition,\n  //     Widget titleText,\n  //     Widget messageText,\n  //     bool instantInit,\n  //     Widget icon,\n  //     bool shouldIconPulse,\n  //     double maxWidth,\n  //     EdgeInsets margin,\n  //     EdgeInsets padding,\n  //     double borderRadius,\n  //     Color borderColor,\n  //     double borderWidth,\n  //     Color backgroundColor,\n  //     Color leftBarIndicatorColor,\n  //     List<BoxShadow> boxShadows,\n  //     Gradient backgroundGradient,\n  //     TextButton mainButton,\n  //     OnTap onTap,\n  //     bool isDismissible,\n  //     bool showProgressIndicator,\n  //     AnimationController progressIndicatorController,\n  //     Color progressIndicatorBackgroundColor,\n  //     Animation<Color> progressIndicatorValueColor,\n  //     SnackStyle snackStyle,\n  //     Curve forwardAnimationCurve,\n  //     Curve reverseAnimationCurve,\n  //     Duration animationDuration,\n  //     double barBlur,\n  //     double overlayBlur,\n  //     Color overlayColor,\n  //     Form userInputForm\n  ///////////////////////////////////\n'})}),"\n",(0,a.jsxs)(n.p,{children:["If you prefer the traditional snackbar, or want to customize it from scratch, including adding just one line (Get.snackbar makes use of a mandatory title and message), you can use\n",(0,a.jsx)(n.code,{children:"Get.rawSnackbar();"})," which provides the RAW API on which Get.snackbar was built."]}),"\n",(0,a.jsx)(n.h3,{id:"dialogs",children:"Dialogs"}),"\n",(0,a.jsx)(n.p,{children:"To open dialog:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"Get.dialog(YourDialogWidget());\n"})}),"\n",(0,a.jsx)(n.p,{children:"To open default dialog:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:'Get.defaultDialog(\n  onConfirm: () => print("Ok"),\n  middleText: "Dialog made in 3 lines of code"\n);\n'})}),"\n",(0,a.jsx)(n.p,{children:"You can also use Get.generalDialog instead of showGeneralDialog."}),"\n",(0,a.jsx)(n.p,{children:"For all other Flutter dialog widgets, including cupertinos, you can use Get.overlayContext instead of context, and open it anywhere in your code.\nFor widgets that don't use Overlay, you can use Get.context.\nThese two contexts will work in 99% of cases to replace the context of your UI, except for cases where inheritedWidget is used without a navigation context."}),"\n",(0,a.jsx)(n.h3,{id:"bottomsheets",children:"BottomSheets"}),"\n",(0,a.jsx)(n.p,{children:"Get.bottomSheet is like showModalBottomSheet, but don't need of context."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"Get.bottomSheet(\n  Container(\n    child: Wrap(\n      children: <Widget>[\n        ListTile(\n          leading: Icon(Icons.music_note),\n          title: Text('Music'),\n          onTap: () {}\n        ),\n        ListTile(\n          leading: Icon(Icons.videocam),\n          title: Text('Video'),\n          onTap: () {},\n        ),\n      ],\n    ),\n  )\n);\n"})}),"\n",(0,a.jsx)(n.h2,{id:"nested-navigation",children:"Nested Navigation"}),"\n",(0,a.jsx)(n.p,{children:"Get made Flutter's nested navigation even easier.\nYou don't need the context, and you will find your navigation stack by Id."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"NOTE: Creating parallel navigation stacks can be dangerous. The ideal is not to use NestedNavigators, or to use sparingly. If your project requires it, go ahead, but keep in mind that keeping multiple navigation stacks in memory may not be a good idea for RAM consumption."}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"See how simple it is:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"Navigator(\n  key: Get.nestedKey(1), // create a key by index\n  initialRoute: '/',\n  onGenerateRoute: (settings) {\n    if (settings.name == '/') {\n      return GetPageRoute(\n        page: () => Scaffold(\n          appBar: AppBar(\n            title: Text(\"Main\"),\n          ),\n          body: Center(\n            child: TextButton(\n              color: Colors.blue,\n              onPressed: () {\n                Get.toNamed('/second', id:1); // navigate by your nested route by index\n              },\n              child: Text(\"Go to second\"),\n            ),\n          ),\n        ),\n      );\n    } else if (settings.name == '/second') {\n      return GetPageRoute(\n        page: () => Center(\n          child: Scaffold(\n            appBar: AppBar(\n              title: Text(\"Main\"),\n            ),\n            body: Center(\n              child:  Text(\"second\")\n            ),\n          ),\n        ),\n      );\n    }\n  }\n),\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>s,a:()=>i});var a=t(7294);const o={},r=a.createContext(o);function i(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);