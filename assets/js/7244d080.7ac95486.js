"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[543],{4965:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var n=a(5893),s=a(1151);const r={sidebar_position:1},i="State management",o={id:"concepts/state-management",title:"State management",description:"Get has two different state managers: the simple state manager (we'll call it GetBuilder) and the reactive state manager (GetX/Obx)",source:"@site/docs/concepts/state-management.md",sourceDirName:"concepts",slug:"/concepts/state-management",permalink:"/getx/docs/concepts/state-management",draft:!1,unlisted:!1,editUrl:"https://github.com/jonataslaw/getx/docs/concepts/state-management.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Concepts",permalink:"/getx/docs/category/concepts"},next:{title:"Route management",permalink:"/getx/docs/concepts/route-management"}},l={},c=[{value:"Reactive State Manager",id:"reactive-state-manager",level:3},{value:"More details about state management",id:"more-details-about-state-management",level:3}];function d(e){const t={a:"a",code:"code",em:"em",h1:"h1",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"state-management",children:"State management"}),"\n",(0,n.jsx)(t.p,{children:"Get has two different state managers: the simple state manager (we'll call it GetBuilder) and the reactive state manager (GetX/Obx)"}),"\n",(0,n.jsx)(t.h3,{id:"reactive-state-manager",children:"Reactive State Manager"}),"\n",(0,n.jsx)(t.p,{children:"Reactive programming can alienate many people because it is said to be complicated. GetX turns reactive programming into something quite simple:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"You won't need to create StreamControllers."}),"\n",(0,n.jsx)(t.li,{children:"You won't need to create a StreamBuilder for each variable"}),"\n",(0,n.jsx)(t.li,{children:"You will not need to create a class for each state."}),"\n",(0,n.jsx)(t.li,{children:"You will not need to create a get for an initial value."}),"\n",(0,n.jsx)(t.li,{children:"You will not need to use code generators"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Reactive programming with Get is as easy as using setState."}),"\n",(0,n.jsx)(t.p,{children:"Let's imagine that you have a name variable and want that every time you change it, all widgets that use it are automatically changed."}),"\n",(0,n.jsx)(t.p,{children:"This is your count variable:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-dart",children:"var name = 'Jonatas Borges';\n"})}),"\n",(0,n.jsx)(t.p,{children:'To make it observable, you just need to add ".obs" to the end of it:'}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-dart",children:"var name = 'Jonatas Borges'.obs;\n"})}),"\n",(0,n.jsx)(t.p,{children:"And in the UI, when you want to show that value and update the screen whenever the values changes, simply do this:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-dart",children:'Obx(() => Text("${controller.name}"));\n'})}),"\n",(0,n.jsxs)(t.p,{children:["That's all. It's ",(0,n.jsx)(t.em,{children:"that"})," simple."]}),"\n",(0,n.jsx)(t.h3,{id:"more-details-about-state-management",children:"More details about state management"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsxs)(t.strong,{children:["See an more in-depth explanation of state management ",(0,n.jsx)(t.a,{href:"/docs/pillars/state-management",children:"here"}),". There you will see more examples and also the difference between the simple state manager and the reactive state manager"]})}),"\n",(0,n.jsx)(t.p,{children:"You will get a good idea of GetX power."})]})}function m(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},1151:(e,t,a)=>{a.d(t,{Z:()=>o,a:()=>i});var n=a(7294);const s={},r=n.createContext(s);function i(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);