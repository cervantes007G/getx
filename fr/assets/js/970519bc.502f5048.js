"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[248],{4266:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var i=t(5893),r=t(1151);const s={sidebar_position:4},a="Utils",l={id:"utils",title:"Utils",description:"Internationalisation",source:"@site/i18n/fr/docusaurus-plugin-content-docs/current/utils.md",sourceDirName:".",slug:"/utils",permalink:"/getx/fr/docs/utils",draft:!1,unlisted:!1,editUrl:"https://github.com/jonataslaw/getx/docs/utils.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"D\xe9pendance",permalink:"/getx/fr/docs/pillars/dependency-management"},next:{title:"Community",permalink:"/getx/fr/docs/category/community"}},o={},d=[{value:"Internationalisation",id:"internationalisation",level:2},{value:"Traductions",id:"traductions",level:3},{value:"Utiliser les traductions",id:"utiliser-les-traductions",level:4},{value:"Utilisation de la traduction au singulier et au pluriel",id:"utilisation-de-la-traduction-au-singulier-et-au-pluriel",level:4},{value:"Utilisation de la traduction avec les param\xe8tres",id:"utilisation-de-la-traduction-avec-les-param\xe8tres",level:4},{value:"Locales",id:"locales",level:3},{value:"Changer la locale",id:"changer-la-locale",level:4},{value:"Param\xe8tres r\xe9gionaux du syst\xe8me",id:"param\xe8tres-r\xe9gionaux-du-syst\xe8me",level:4},{value:"Changer de th\xe8me",id:"changer-de-th\xe8me",level:2},{value:"Se connecter",id:"se-connecter",level:2},{value:"Configuration par d\xe9faut",id:"configuration-par-d\xe9faut",level:3},{value:"Configuration personnalis\xe9e",id:"configuration-personnalis\xe9e",level:3},{value:"GetPage Middleware",id:"getpage-middleware",level:2},{value:"Priorit\xe9",id:"priorit\xe9",level:3},{value:"Rediriger",id:"rediriger",level:3},{value:"sur la page appel\xe9e",id:"sur-la-page-appel\xe9e",level:3},{value:"OnBindingsStart",id:"onbindingsstart",level:3},{value:"D\xe9marrage de la construction sur la page",id:"d\xe9marrage-de-la-construction-sur-la-page",level:3},{value:"OnPageBuilt",id:"onpagebuilt",level:3},{value:"Disposer de la page",id:"disposer-de-la-page",level:3},{value:"Autres API Avanc\xe9es",id:"autres-api-avanc\xe9es",level:2},{value:"Param\xe8tres globaux optionnels et configurations manuelles",id:"param\xe8tres-globaux-optionnels-et-configurations-manuelles",level:3},{value:"Widgets d&#39;\xe9tat local",id:"widgets-d\xe9tat-local",level:3},{value:"Constructeur de valeur",id:"constructeur-de-valeur",level:4},{value:"ObxValue",id:"obxvalue",level:4},{value:"Conseils utiles",id:"conseils-utiles",level:2},{value:"Mixin",id:"mixin",level:2},{value:"GetView",id:"getview",level:4},{value:"Obtenir la vue Responsive",id:"obtenir-la-vue-responsive",level:4},{value:"Comment l&#39;utiliser",id:"comment-lutiliser",level:5},{value:"GetWidget",id:"getwidget",level:4},{value:"GetxService",id:"getxservice",level:4},{value:"Tests",id:"tests",level:3},{value:"Conseils",id:"conseils",level:4},{value:"Mockito ou mocktail",id:"mockito-ou-mocktail",level:5},{value:"Utiliser la fonction Get.reset()",id:"utiliser-la-fonction-getreset",level:5},{value:"Get.testMode",id:"gettestmode",level:5}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"utils",children:"Utils"}),"\n",(0,i.jsx)(n.h2,{id:"internationalisation",children:"Internationalisation"}),"\n",(0,i.jsx)(n.h3,{id:"traductions",children:"Traductions"}),"\n",(0,i.jsxs)(n.p,{children:["Les traductions sont conserv\xe9es comme une simple carte de dictionnaire de valeur cl\xe9.\nPour ajouter des traductions personnalis\xe9es, cr\xe9ez une classe et \xe9tendez ",(0,i.jsx)(n.code,{children:"Translations"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"import 'package:get/get.dart';\n\nclass Messages extends Translations {\n  @override\n  Map<String, Map<String, String>> get keys => {\n        'en_US': {\n          'hello': 'Hello World',\n        },\n        'de_DE': {\n          'hello': 'Hallo Welt',\n        }\n      };\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"utiliser-les-traductions",children:"Utiliser les traductions"}),"\n",(0,i.jsxs)(n.p,{children:["Ajoute simplement ",(0,i.jsx)(n.code,{children:".tr"})," \xe0 la cl\xe9 sp\xe9cifi\xe9e et elle sera traduite, en utilisant la valeur actuelle de ",(0,i.jsx)(n.code,{children:"Get.locale"})," et ",(0,i.jsx)(n.code,{children:"Get.fallbackLocale"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"Text('title'.tr);\n"})}),"\n",(0,i.jsx)(n.h4,{id:"utilisation-de-la-traduction-au-singulier-et-au-pluriel",children:"Utilisation de la traduction au singulier et au pluriel"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"var products = [];\nText('singularKey'.trPlural('pluralKey', products.length, Args));\n"})}),"\n",(0,i.jsx)(n.h4,{id:"utilisation-de-la-traduction-avec-les-param\xe8tres",children:"Utilisation de la traduction avec les param\xe8tres"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"import 'package:get/get.dart';\n\n\nMap<String, Map<String, String>> get keys => {\n    'en_US': {\n        'logged_in': 'logged in as @name with email @email',\n    },\n    'es_ES': {\n       'logged_in': 'iniciado sesi\xf3n como @name con e-mail @email',\n    }\n};\n\nText('logged_in'.trParams({\n  'name': 'Jhon',\n  'email': 'jhon@example.com'\n  }));\n"})}),"\n",(0,i.jsx)(n.h3,{id:"locales",children:"Locales"}),"\n",(0,i.jsxs)(n.p,{children:["Passez les param\xe8tres \xe0 ",(0,i.jsx)(n.code,{children:"GetMaterialApp"})," pour d\xe9finir la locale et les traductions."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"return GetMaterialApp(\n    translations: Messages(), // your translations\n    locale: Locale('en', 'US'), // translations will be displayed in that locale\n    fallbackLocale: Locale('en', 'UK'), // specify the fallback locale in case an invalid locale is selected.\n);\n"})}),"\n",(0,i.jsx)(n.h4,{id:"changer-la-locale",children:"Changer la locale"}),"\n",(0,i.jsxs)(n.p,{children:["Appelez ",(0,i.jsx)(n.code,{children:"Get.updateLocale(locale)"})," pour mettre \xe0 jour la locale. Les traductions utilisent alors automatiquement la nouvelle locale."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"var locale = Locale('en', 'US');\nGet.updateLocale(locale);\n"})}),"\n",(0,i.jsx)(n.h4,{id:"param\xe8tres-r\xe9gionaux-du-syst\xe8me",children:"Param\xe8tres r\xe9gionaux du syst\xe8me"}),"\n",(0,i.jsxs)(n.p,{children:["Pour lire la locale du syst\xe8me, vous pouvez utiliser ",(0,i.jsx)(n.code,{children:"Get.deviceLocale"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"return GetMaterialApp(\n    locale: Get.deviceLocale,\n);\n"})}),"\n",(0,i.jsx)(n.h2,{id:"changer-de-th\xe8me",children:"Changer de th\xe8me"}),"\n",(0,i.jsxs)(n.p,{children:["Veuillez ne pas utiliser de widget de niveau sup\xe9rieur \xe0 ",(0,i.jsx)(n.code,{children:"GetMaterialApp"})," pour le mettre \xe0 jour. Cela peut d\xe9clencher des cl\xe9s dupliqu\xe9es. Beaucoup de gens sont habitu\xe9s \xe0 l'approche pr\xe9historique de la cr\xe9ation d'un widget \"Fournisseur de th\xe8mes\" simplement pour changer le th\xe8me de votre application, et ce n'est certainement PAS n\xe9cessaire avec ",(0,i.jsx)(n.strong,{children:"GetXTM"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Vous pouvez cr\xe9er votre th\xe8me personnalis\xe9 et l'ajouter simplement dans ",(0,i.jsx)(n.code,{children:"Get.changeTheme"})," sans aucune boilerplate pour cela:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"Get.changeTheme(ThemeData.light());\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Si vous voulez cr\xe9er quelque chose comme un bouton qui change le th\xe8me dans ",(0,i.jsx)(n.code,{children:"onTap"}),", vous pouvez combiner deux API ",(0,i.jsx)(n.strong,{children:"GetXTM"})," pour cela :"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["L'api qui v\xe9rifie si le sombre ",(0,i.jsx)(n.code,{children:"Theme"})," est utilis\xe9."]}),"\n",(0,i.jsxs)(n.li,{children:["Et le ",(0,i.jsx)(n.code,{children:"Th\xe8me"})," Change API, vous pouvez juste le mettre dans un ",(0,i.jsx)(n.code,{children:"onPressed"}),":"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"Get.changeTheme(Get.isDarkMode? ThemeData.light(): ThemeData.dark());\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Quand ",(0,i.jsx)(n.code,{children:".darkmode"})," est activ\xe9, il bascule vers le th\xe8me _light et quand le th\xe8me _light devient actif, il passera \xe0 ",(0,i.jsx)(n.em,{children:"dark theme"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"se-connecter",children:"Se connecter"}),"\n",(0,i.jsx)(n.p,{children:"GetConnect est un moyen facile de communiquer de votre dos \xe0 votre front avec http ou websockets"}),"\n",(0,i.jsx)(n.h3,{id:"configuration-par-d\xe9faut",children:"Configuration par d\xe9faut"}),"\n",(0,i.jsx)(n.p,{children:"Vous pouvez simplement \xe9tendre GetConnect et utiliser les m\xe9thodes GET/POST/PUT/DELETE/SOCKET pour communiquer avec votre API Rest ou vos sockets."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"class UserProvider extends GetConnect {\n  // Get request\n  Future<Response> getUser(int id) => get('http://youapi/users/$id');\n  // Post request\n  Future<Response> postUser(Map data) => post('http://youapi/users', body: data);\n  // Post request with File\n  Future<Response<CasesModel>> postCases(List<int> image) {\n    final form = FormData({\n      'file': MultipartFile(image, filename: 'avatar.png'),\n      'otherFile': MultipartFile(image, filename: 'cover.png'),\n    });\n    return post('http://youapi/users/upload', form);\n  }\n\n  GetSocket userMessages() {\n    return socket('https://yourapi/users/socket');\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"configuration-personnalis\xe9e",children:"Configuration personnalis\xe9e"}),"\n",(0,i.jsx)(n.p,{children:"GetConnect est hautement personnalisable. Vous pouvez d\xe9finir l'URL de base, comme modificateur de r\xe9ponse, comme modificateur de requ\xeates, d\xe9finir un authentificateur et m\xeame le nombre de tentatives dans lesquelles il essaiera de s'authentifier, en plus de donner la possibilit\xe9 de d\xe9finir un d\xe9codeur standard qui transformera toutes vos requ\xeates en mod\xe8les sans configuration suppl\xe9mentaire."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"class HomeProvider extends GetConnect {\n  @override\n  void onInit() {\n    // All request will pass to jsonEncode so CasesModel.fromJson()\n    httpClient.defaultDecoder = CasesModel.fromJson;\n    httpClient.baseUrl = 'https://api.covid19api.com';\n    // baseUrl = 'https://api.covid19api.com'; // It define baseUrl to\n    // Http and websockets if used with no [httpClient] instance\n\n    // It's will attach 'apikey' property on header from all requests\n    httpClient.addRequestModifier((request) {\n      request.headers['apikey'] = '12345678';\n      return request;\n    });\n\n    // Even if the server sends data from the country \"Brazil\",\n    // it will never be displayed to users, because you remove\n    // that data from the response, even before the response is delivered\n    httpClient.addResponseModifier<CasesModel>((request, response) {\n      CasesModel model = response.body;\n      if (model.countries.contains('Brazil')) {\n        model.countries.remove('Brazilll');\n      }\n    });\n\n    httpClient.addAuthenticator((request) async {\n      final response = await get(\"http://yourapi/token\");\n      final token = response.body['token'];\n      // Set the header\n      request.headers['Authorization'] = \"$token\";\n      return request;\n    });\n\n    //Autenticator will be called 3 times if HttpStatus is\n    //HttpStatus.unauthorized\n    httpClient.maxAuthRetries = 3;\n  }\n\n  @override\n  Future<Response<CasesModel>> getCases(String path) => get(path);\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"getpage-middleware",children:"GetPage Middleware"}),"\n",(0,i.jsx)(n.p,{children:"La GetPage a maintenant une nouvelle propri\xe9t\xe9 qui prend une liste de GetMiddleWare et les ex\xe9cute dans l'ordre sp\xe9cifique."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Remarque"})," : lorsque GetPage a un Middlewares, tous les enfants de cette page auront automatiquement les m\xeames marchandises du milieu."]}),"\n",(0,i.jsx)(n.h3,{id:"priorit\xe9",children:"Priorit\xe9"}),"\n",(0,i.jsx)(n.p,{children:"L'ordre des Middlewares \xe0 ex\xe9cuter peut \xeatre d\xe9fini par la priorit\xe9 dans le GetMiddleware."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"final middlewares = [\n  GetMiddleware(priority: 2),\n  GetMiddleware(priority: 5),\n  GetMiddleware(priority: 4),\n  GetMiddleware(priority: -8),\n];\n"})}),"\n",(0,i.jsxs)(n.p,{children:["ces middlewares seront ex\xe9cut\xe9s dans cet ordre ",(0,i.jsx)(n.strong,{children:"-8 => 2 => 4 => 5"})]}),"\n",(0,i.jsx)(n.h3,{id:"rediriger",children:"Rediriger"}),"\n",(0,i.jsx)(n.p,{children:"Cette fonction sera appel\xe9e lorsque la page de la route appel\xe9e sera recherch\xe9e. Il prend les param\xe8tres de route comme un r\xe9sultat vers lequel rediriger. Ou donnez-lui null et il n'y aura pas de redirection."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"RouteSettings redirect(String route) {\n  final authService = Get.find<AuthService>();\n  return authService.authed.value ? null : RouteSettings(name: '/login')\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"sur-la-page-appel\xe9e",children:"sur la page appel\xe9e"}),"\n",(0,i.jsx)(n.p,{children:"Cette fonction sera appel\xe9e lorsque cette page sera appel\xe9e avant tout ce qui est cr\xe9\xe9\nvous pouvez l'utiliser pour changer quelque chose \xe0 propos de la page ou lui donner une nouvelle page"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"GetPage onPageCalled(GetPage page) {\n  final authService = Get.find<AuthService>();\n  return page.copyWith(title: 'Welcome ${authService.UserName}');\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"onbindingsstart",children:"OnBindingsStart"}),"\n",(0,i.jsx)(n.p,{children:"Cette fonction sera appel\xe9e juste avant l'initialisation de la liaison.\nIci, vous pouvez changer les Liens pour cette page."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"List<Bindings> onBindingsStart(List<Bindings> bindings) {\n  final authService = Get.find<AuthService>();\n  if (authService.isAdmin) {\n    bindings.add(AdminBinding());\n  }\n  return bindings;\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"d\xe9marrage-de-la-construction-sur-la-page",children:"D\xe9marrage de la construction sur la page"}),"\n",(0,i.jsx)(n.p,{children:"Cette fonction sera appel\xe9e juste apr\xe8s l'initialisation des liaisons.\nIci, vous pouvez faire quelque chose apr\xe8s que vous avez cr\xe9\xe9 les liaisons et avant de cr\xe9er le widget de page."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"GetPageBuilder onPageBuildStart(GetPageBuilder page) {\n  print('bindings are ready');\n  return page;\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"onpagebuilt",children:"OnPageBuilt"}),"\n",(0,i.jsx)(n.p,{children:"Cette fonction sera appel\xe9e juste apr\xe8s que la fonction GetPage.page soit appel\xe9e et vous donnera le r\xe9sultat de la fonction. et prendre le widget qui sera affich\xe9."}),"\n",(0,i.jsx)(n.h3,{id:"disposer-de-la-page",children:"Disposer de la page"}),"\n",(0,i.jsx)(n.p,{children:"Cette fonction sera appel\xe9e juste apr\xe8s avoir \xe9limin\xe9 tous les objets connexes (Contr\xf4leurs, vues, ...) de la page."}),"\n",(0,i.jsx)(n.h2,{id:"autres-api-avanc\xe9es",children:"Autres API Avanc\xe9es"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"// give the current args from currentScreen\nGet.arguments\n\n// give name of previous route\nGet.previousRoute\n\n// give the raw route to access for example, rawRoute.isFirst()\nGet.rawRoute\n\n// give access to Routing API from GetObserver\nGet.routing\n\n// check if snackbar is open\nGet.isSnackbarOpen\n\n// check if dialog is open\nGet.isDialogOpen\n\n// check if bottomsheet is open\nGet.isBottomSheetOpen\n\n// remove one route.\nGet.removeRoute()\n\n// back repeatedly until the predicate returns true.\nGet.until()\n\n// go to next route and remove all the previous routes until the predicate returns true.\nGet.offUntil()\n\n// go to next named route and remove all the previous routes until the predicate returns true.\nGet.offNamedUntil()\n\n//Check in what platform the app is running\nGetPlatform.isAndroid\nGetPlatform.isIOS\nGetPlatform.isMacOS\nGetPlatform.isWindows\nGetPlatform.isLinux\nGetPlatform.isFuchsia\n\n//Check the device type\nGetPlatform.isMobile\nGetPlatform.isDesktop\n//All platforms are supported independently in web!\n//You can tell if you are running inside a browser\n//on Windows, iOS, OSX, Android, etc.\nGetPlatform.isWeb\n\n\n// Equivalent to : MediaQuery.of(context).size.height,\n// but immutable.\nGet.height\nGet.width\n\n// Gives the current context of the Navigator.\nGet.context\n\n// Gives the context of the snackbar/dialog/bottomsheet in the foreground, anywhere in your code.\nGet.contextOverlay\n\n// Note: the following methods are extensions on context. Since you\n// have access to context in any place of your UI, you can use it anywhere in the UI code\n\n// If you need a changeable height/width (like Desktop or browser windows that can be scaled) you will need to use context.\ncontext.width\ncontext.height\n\n// Gives you the power to define half the screen, a third of it and so on.\n// Useful for responsive applications.\n// param dividedBy (double) optional - default: 1\n// param reducedBy (double) optional - default: 0\ncontext.heightTransformer()\ncontext.widthTransformer()\n\n/// Similar to MediaQuery.sizeOf(context);\ncontext.mediaQuerySize()\n\n/// Similar to MediaQuery.paddingOf(context);\ncontext.mediaQueryPadding()\n\n/// Similar to MediaQuery.viewPaddingOf(context);\ncontext.mediaQueryViewPadding()\n\n/// Similar to MediaQuery.viewInsetsOf(context);\ncontext.mediaQueryViewInsets()\n\n/// Similar to MediaQuery.orientationOf(context);\ncontext.orientation()\n\n/// Check if device is on landscape mode\ncontext.isLandscape()\n\n/// Check if device is on portrait mode\ncontext.isPortrait()\n\n/// Similar to MediaQuery.devicePixelRatioOf(context);\ncontext.devicePixelRatio()\n\n/// Similar to MediaQuery.textScaleFactorOf(context);\ncontext.textScaleFactor()\n\n/// Get the shortestSide from screen\ncontext.mediaQueryShortestSide()\n\n/// True if width be larger than 800\ncontext.showNavbar()\n\n/// True if the shortestSide is smaller than 600p\ncontext.isPhone()\n\n/// True if the shortestSide is largest than 600p\ncontext.isSmallTablet()\n\n/// True if the shortestSide is largest than 720p\ncontext.isLargeTablet()\n\n/// True if the current device is Tablet\ncontext.isTablet()\n\n/// Returns a value<T> according to the screen size\n/// can give value for:\n/// watch: if the shortestSide is smaller than 300\n/// mobile: if the shortestSide is smaller than 600\n/// tablet: if the shortestSide is smaller than 1200\n/// desktop: if width is largest than 1200\ncontext.responsiveValue<T>()\n"})}),"\n",(0,i.jsx)(n.h3,{id:"param\xe8tres-globaux-optionnels-et-configurations-manuelles",children:"Param\xe8tres globaux optionnels et configurations manuelles"}),"\n",(0,i.jsx)(n.p,{children:"GetMaterialApp configure tout pour vous, mais si vous voulez configurer Get manuellement."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"MaterialApp(\n  navigatorKey: Get.key,\n  navigatorObservers: [GetObserver()],\n);\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Vous pourrez \xe9galement utiliser votre propre Middleware dans ",(0,i.jsx)(n.code,{children:"GetObserver"}),", cela n'influencera rien."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"MaterialApp(\n  navigatorKey: Get.key,\n  navigatorObservers: [\n    GetObserver(MiddleWare.observer) // Here\n  ],\n);\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Vous pouvez cr\xe9er ",(0,i.jsx)(n.em,{children:"Param\xe8tres globaux"})," pour ",(0,i.jsx)(n.code,{children:"Get"}),". Ajoute simplement ",(0,i.jsx)(n.code,{children:"Get.config"})," \xe0 ton code avant d'envoyer n'importe quelle route.\nOu faites-le directement dans votre ",(0,i.jsx)(n.code,{children:"GetMaterialApp"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"GetMaterialApp(\n  enableLog: true,\n  defaultTransition: Transition.fade,\n  opaqueRoute: Get.isOpaqueRouteDefault,\n  popGesture: Get.isPopGestureEnable,\n  transitionDuration: Get.defaultDurationTransition,\n  defaultGlobalState: Get.defaultGlobalState,\n);\n\nGet.config(\n  enableLog = true,\n  defaultPopGesture = true,\n  defaultTransition = Transitions.cupertino\n)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Vous pouvez optionnellement rediriger tous les messages de log de ",(0,i.jsx)(n.code,{children:"Get"}),".\nSi vous voulez utiliser votre propre paquet de journalisation favori,\net que vous voulez y capturer les logs :"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"GetMaterialApp(\n  enableLog: true,\n  logWriterCallback: localLogWriter,\n);\n\nvoid localLogWriter(String text, {bool isError = false}) {\n  // pass the message to your favourite logging package here\n  // please note that even if enableLog: false log messages will be pushed in this callback\n  // you get check the flag if you want through GetConfig.isLogEnable\n}\n\n"})}),"\n",(0,i.jsx)(n.h3,{id:"widgets-d\xe9tat-local",children:"Widgets d'\xe9tat local"}),"\n",(0,i.jsxs)(n.p,{children:["Ces Widgets vous permettent de g\xe9rer une seule valeur et de garder l'\xe9tat \xe9ph\xe9m\xe8re et localement.\nNous avons des saveurs pour la r\xe9activit\xe9 et la simplicit\xe9.\nPar exemple, vous pouvez les utiliser pour activer/d\xe9sactiver obscureText dans un ",(0,i.jsx)(n.code,{children:"TextField"}),", peut-\xeatre cr\xe9er un panneau\npersonnalis\xe9, ou peut-\xeatre modifier l'index actuel dans ",(0,i.jsx)(n.code,{children:"BottomNavigationBar"})," en changeant le contenu\ndu corps dans un ",(0,i.jsx)(n.code,{children:"Scaffold"}),"."]}),"\n",(0,i.jsx)(n.h4,{id:"constructeur-de-valeur",children:"Constructeur de valeur"}),"\n",(0,i.jsxs)(n.p,{children:["Une simplification de ",(0,i.jsx)(n.code,{children:"StatefulWidget"})," qui fonctionne avec un callback ",(0,i.jsx)(n.code,{children:".setState"})," qui prend la valeur mise \xe0 jour."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:'ValueBuilder<bool>(\n  initialValue: false,\n  builder: (value, updateFn) => Switch(\n    value: value,\n    onChanged: updateFn, // same signature! you could use ( newValue ) => updateFn( newValue )\n  ),\n  // if you need to call something outside the builder method.\n  onUpdate: (value) => print("Value updated: $value"),\n  onDispose: () => print("Widget unmounted"),\n),\n'})}),"\n",(0,i.jsx)(n.h4,{id:"obxvalue",children:"ObxValue"}),"\n",(0,i.jsxs)(n.p,{children:["Similaire \xe0 ",(0,i.jsx)(n.a,{href:"#valuebuilder",children:(0,i.jsx)(n.code,{children:"ValueBuilder"})}),", mais il s'agit de la version r\xe9active, vous passez une instance Rx (souvenez-vous du .obs magique ?) et\nse met \xe0 jour automatiquement... Ce n'est pas g\xe9nial ?"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"ObxValue((data) => Switch(\n        value: data.value,\n        onChanged: data, // Rx has a _callable_ function! You could use (flag) => data.value = flag,\n    ),\n    false.obs,\n),\n"})}),"\n",(0,i.jsx)(n.h2,{id:"conseils-utiles",children:"Conseils utiles"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:".obs"}),"ervables (aussi connu sous le nom de ",(0,i.jsx)(n.em,{children:"Rx"})," Types) ont une grande vari\xe9t\xe9 de m\xe9thodes et d'op\xe9rateurs internes."]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Est tr\xe8s commun de ",(0,i.jsx)(n.em,{children:"croire"})," qu'une propri\xe9t\xe9 avec ",(0,i.jsx)(n.code,{children:".obs"})," ",(0,i.jsx)(n.strong,{children:"IS"})," la valeur r\xe9elle... mais ne vous m\xe9prenez pas!\nNous \xe9vitons la d\xe9claration de type de la variable, car le compilateur de Dart est assez intelligent, et le code\nsemble plus propre, mais:"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"var message = 'Hello world'.obs;\nprint( 'Message \"$message\" has Type ${message.runtimeType}');\n"})}),"\n",(0,i.jsxs)(n.p,{children:["M\xeame si ",(0,i.jsx)(n.code,{children:"message"})," ",(0,i.jsx)(n.em,{children:"prints"})," la valeur r\xe9elle de cha\xeene de caract\xe8res, le Type est ",(0,i.jsx)(n.strong,{children:"RxString"}),"!"]}),"\n",(0,i.jsxs)(n.p,{children:["Donc, vous ne pouvez pas faire ",(0,i.jsx)(n.code,{children:"message.substring( 0, 4 )"}),".\nVous devez acc\xe9der \xe0 la vraie ",(0,i.jsx)(n.code,{children:"value"})," \xe0 l'int\xe9rieur du ",(0,i.jsx)(n.em,{children:"observable"}),':\nLa m\xe9thode la plus "utilis\xe9e" est ',(0,i.jsx)(n.code,{children:". alue"}),", mais saviez-vous que vous pouvez aussi utiliser..."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"final name = 'GetX'.obs;\n// only \"updates\" the stream, if the value is different from the current one.\nname.value = 'Hey';\n\n// All Rx properties are \"callable\" and returns the new value.\n// but this approach does not accepts `null`, the UI will not rebuild.\nname('Hello');\n\n// is like a getter, prints 'Hello'.\nname() ;\n\n/// numbers:\n\nfinal count = 0.obs;\n\n// You can use all non mutable operations from num primitives!\ncount + 1;\n\n// Watch out! this is only valid if `count` is not final, but var\ncount += 1;\n\n// You can also compare against values:\ncount > 2;\n\n/// booleans:\n\nfinal flag = false.obs;\n\n// switches the value between true/false\nflag.toggle();\n\n\n/// all types:\n\n// Sets the `value` to null.\nflag.nil();\n\n// All toString(), toJson() operations are passed down to the `value`\nprint( count ); // calls `toString()` inside  for RxInt\n\nfinal abc = [0,1,2].obs;\n// Converts the value to a json Array, prints RxList\n// Json is supported by all Rx types!\nprint('json: ${jsonEncode(abc)}, type: ${abc.runtimeType}');\n\n// RxMap, RxList and RxSet are special Rx types, that extends their native types.\n// but you can work with a List as a regular list, although is reactive!\nabc.add(12); // pushes 12 to the list, and UPDATES the stream.\nabc[3]; // like Lists, reads the index 3.\n\n\n// equality works with the Rx and the value, but hashCode is always taken from the value\nfinal number = 12.obs;\nprint( number == 12 ); // prints > true\n\n/// Custom Rx Models:\n\n// toJson(), toString() are deferred to the child, so you can implement override on them, and print() the observable directly.\n\nclass User {\n    String name, last;\n    int age;\n    User({this.name, this.last, this.age});\n\n    @override\n    String toString() => '$name $last, $age years old';\n}\n\nfinal user = User(name: 'John', last: 'Doe', age: 33).obs;\n\n// `user` is \"reactive\", but the properties inside ARE NOT!\n// So, if we change some variable inside of it...\nuser.value.name = 'Roi';\n// The widget will not rebuild!,\n// `Rx` don't have any clue when you change something inside user.\n// So, for custom classes, we need to manually \"notify\" the change.\nuser.refresh();\n\n// or we can use the `update()` method!\nuser.update((value){\n  value.name='Roi';\n});\n\nprint( user );\n"})}),"\n",(0,i.jsx)(n.h2,{id:"mixin",children:"Mixin"}),"\n",(0,i.jsxs)(n.p,{children:["Une autre fa\xe7on de g\xe9rer votre \xe9tat ",(0,i.jsx)(n.code,{children:"UI"})," est d'utiliser le ",(0,i.jsx)(n.code,{children:"StateMixin<T>"}),".\nPour l'impl\xe9menter, utilisez le ",(0,i.jsx)(n.code,{children:"with"})," pour ajouter le ",(0,i.jsx)(n.code,{children:"StateMixin<T>"}),"\n\xe0 votre contr\xf4leur qui permet un mod\xe8le T."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"class Controller extends GetController with StateMixin<User>{}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["La m\xe9thode ",(0,i.jsx)(n.code,{children:"change()"})," change l'\xe9tat quand nous le voulons.\nIl suffit de transmettre les donn\xe9es et le statut de cette fa\xe7on :"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"change(data, status: RxStatus.success());\n"})}),"\n",(0,i.jsx)(n.p,{children:"RxStatus autorise ces statuts :"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"RxStatus.loading();\nRxStatus.success();\nRxStatus.empty();\nRxStatus.error('message');\n"})}),"\n",(0,i.jsx)(n.p,{children:"Pour le repr\xe9senter dans l'interface utilisateur, utilisez :"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"class OtherClass extends GetView<Controller> {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n\n      body: controller.obx(\n        (state)=>Text(state.name),\n        \n        // here you can put your custom loading indicator, but\n        // by default would be Center(child:CircularProgressIndicator())\n        onLoading: CustomLoadingIndicator(),\n        onEmpty: Text('No data found'),\n\n        // here also you can set your own error widget, but by\n        // default will be an Center(child:Text(error))\n        onError: (error)=>Text(error),\n      ),\n    );\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"getview",children:"GetView"}),"\n",(0,i.jsx)(n.p,{children:"J'aime ce Widget, est si simple, mais si utile!"}),"\n",(0,i.jsxs)(n.p,{children:["Est un Widget ",(0,i.jsx)(n.code,{children:"const Stateless"})," qui a un getter ",(0,i.jsx)(n.code,{children:"controller"})," pour un ",(0,i.jsx)(n.code,{children:"Controller"})," enregistr\xe9, c'est tout."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:" class AwesomeController extends GetController {\n   final String title = 'My Awesome View';\n }\n\n  // ALWAYS remember to pass the `Type` you used to register your controller!\n class AwesomeView extends GetView<AwesomeController> {\n   @override\n   Widget build(BuildContext context) {\n     return Container(\n       padding: EdgeInsets.all(20),\n       child: Text(controller.title), // just call `controller.something`\n     );\n   }\n }\n"})}),"\n",(0,i.jsx)(n.h4,{id:"obtenir-la-vue-responsive",children:"Obtenir la vue Responsive"}),"\n",(0,i.jsxs)(n.p,{children:["\xc9tendre ce widget pour construire une vue responsive.\nce widget contient la propri\xe9t\xe9 ",(0,i.jsx)(n.code,{children:"screen"})," qui a toutes les informations\nsur la taille et le type de l'\xe9cran."]}),"\n",(0,i.jsx)(n.h5,{id:"comment-lutiliser",children:"Comment l'utiliser"}),"\n",(0,i.jsx)(n.p,{children:"Vous avez deux options pour le construire."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["avec la m\xe9thode ",(0,i.jsx)(n.code,{children:"builder"})," vous retournez le widget \xe0 construire."]}),"\n",(0,i.jsxs)(n.li,{children:["avec les m\xe9thodes ",(0,i.jsx)(n.code,{children:"desktop"}),", ",(0,i.jsx)(n.code,{children:"tablet"}),",",(0,i.jsx)(n.code,{children:"phone"}),", ",(0,i.jsx)(n.code,{children:"watch"}),". la m\xe9thode\nsp\xe9cifique sera construite lorsque le type d'\xe9cran correspond \xe0 la m\xe9thode\nquand l'\xe9cran est [ScreenType.Tablet] la m\xe9thode ",(0,i.jsx)(n.code,{children:"tablet"}),"\nsera expurg\xe9e, et ainsi de suite.\n",(0,i.jsx)(n.strong,{children:"Note:"})," Si vous utilisez cette m\xe9thode, veuillez d\xe9finir la propri\xe9t\xe9 ",(0,i.jsx)(n.code,{children:"alwaysUseBuilder"})," \xe0 ",(0,i.jsx)(n.code,{children:"false"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Avec la propri\xe9t\xe9 ",(0,i.jsx)(n.code,{children:"settings"})," vous pouvez d\xe9finir la limite de largeur pour les types d'\xe9cran."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.img,{src:"https://github.com/SchabanBo/get_page_example/blob/master/docs/Example.gif?raw=true",alt:"example"}),"\nCode \xe0 cet \xe9cran\n",(0,i.jsx)(n.a,{href:"https://github.com/SchabanBo/get_page_example/blob/master/lib/pages/responsive_example/responsive_view.dart",children:"code"})]}),"\n",(0,i.jsx)(n.h4,{id:"getwidget",children:"GetWidget"}),"\n",(0,i.jsxs)(n.p,{children:["La plupart des gens n'ont aucune id\xe9e de ce Widget, ou compl\xe8tement confondre son utilisation.\nLe cas d'utilisation est tr\xe8s rare, mais tr\xe8s sp\xe9cifique: Il ",(0,i.jsx)(n.code,{children:"caches"})," un Contr\xf4leur.\n\xc0 cause du ",(0,i.jsx)(n.em,{children:"cache"}),", ne peut pas \xeatre un ",(0,i.jsx)(n.code,{children:"const Stateless"}),"."]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:'Alors, quand avez-vous besoin de "cacher" un contr\xf4leur ?'}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:['Si vous utilisez, une autre fonctionnalit\xe9 "pas si commune" de ',(0,i.jsx)(n.strong,{children:"GetX"}),": ",(0,i.jsx)(n.code,{children:"Get.create()"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Get.create(()=>Controller())"})," g\xe9n\xe9rera un nouveau ",(0,i.jsx)(n.code,{children:"Controller"})," chaque fois que vous appelez\n",(0,i.jsx)(n.code,{children:"Get.find<Controller>()"}),","]}),"\n",(0,i.jsxs)(n.p,{children:["C'est l\xe0 que r\xe9side ",(0,i.jsx)(n.code,{children:"GetWidget"}),"... comme vous pouvez l'utiliser, par exemple,\npour garder une liste des \xe9l\xe9ments de Todo. Donc, si le widget est reconstruit, il conservera la m\xeame instance de contr\xf4leur."]}),"\n",(0,i.jsx)(n.h4,{id:"getxservice",children:"GetxService"}),"\n",(0,i.jsxs)(n.p,{children:["Cette classe est comme un ",(0,i.jsx)(n.code,{children:"GetxController"}),", il partage le m\xeame cycle de vie ( ",(0,i.jsx)(n.code,{children:"onInit()"}),", ",(0,i.jsx)(n.code,{children:"onReady()"}),", ",(0,i.jsx)(n.code,{children:"onClose()"}),").\nMais il n'y a pas de \"logique\" \xe0 l'int\xe9rieur. Il suffit de notifier ",(0,i.jsx)(n.strong,{children:"GetX"})," syst\xe8me d'injection de d\xe9pendance, que cette sous-classe\n",(0,i.jsx)(n.strong,{children:"ne peut pas"})," \xeatre retir\xe9e de la m\xe9moire."]}),"\n",(0,i.jsxs)(n.p,{children:['Il est donc super utile de garder vos "Services" toujours joignables et actives avec ',(0,i.jsx)(n.code,{children:"Get.find()"}),". J'aime:\n",(0,i.jsx)(n.code,{children:"ApiService"}),", ",(0,i.jsx)(n.code,{children:"StorageService"}),", ",(0,i.jsx)(n.code,{children:"CacheService"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"Future<void> main() async {\n  await initServices(); /// AWAIT SERVICES INITIALIZATION.\n  runApp(SomeApp());\n}\n\n/// Is a smart move to make your Services intiialize before you run the Flutter app.\n/// as you can control the execution flow (maybe you need to load some Theme configuration,\n/// apiKey, language defined by the User... so load SettingService before running ApiService.\n/// so GetMaterialApp() doesnt have to rebuild, and takes the values directly.\nvoid initServices() async {\n  print('starting services ...');\n  /// Here is where you put get_storage, hive, shared_pref initialization.\n  /// or moor connection, or whatever that's async.\n  await Get.putAsync(() => DbService().init());\n  await Get.putAsync(SettingsService()).init();\n  print('All services started...');\n}\n\nclass DbService extends GetxService {\n  Future<DbService> init() async {\n    print('$runtimeType delays 2 sec');\n    await 2.delay();\n    print('$runtimeType ready!');\n    return this;\n  }\n}\n\nclass SettingsService extends GetxService {\n  void init() async {\n    print('$runtimeType delays 1 sec');\n    await 1.delay();\n    print('$runtimeType ready!');\n  }\n}\n\n"})}),"\n",(0,i.jsxs)(n.p,{children:["La seule fa\xe7on de supprimer un ",(0,i.jsx)(n.code,{children:"GetxService"}),", est d'utiliser ",(0,i.jsx)(n.code,{children:"Get.reset()"}),' qui est comme un\n"Hot Reboot" de votre application. So remember, if you need absolute persistence of a class instance during the\nlifetime of your app, use ',(0,i.jsx)(n.code,{children:"GetxService"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"tests",children:"Tests"}),"\n",(0,i.jsx)(n.p,{children:"Vous pouvez tester vos contr\xf4leurs comme n'importe quelle autre classe, y compris leur cycle de vie :"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"class Controller extends GetxController {\n  @override\n  void onInit() {\n    super.onInit();\n    //Change value to name2\n    name.value = 'name2';\n  }\n\n  @override\n  void onClose() {\n    name.value = '';\n    super.onClose();\n  }\n\n  final name = 'name1'.obs;\n\n  void changeName() => name.value = 'name3';\n}\n\nvoid main() {\n  test('''\nTest the state of the reactive variable \"name\" across all of its lifecycles''',\n      () {\n    /// You can test the controller without the lifecycle,\n    /// but it's not recommended unless you're not using\n    ///  GetX dependency injection\n    final controller = Controller();\n    expect(controller.name.value, 'name1');\n\n    /// If you are using it, you can test everything,\n    /// including the state of the application after each lifecycle.\n    Get.put(controller); // onInit was called\n    expect(controller.name.value, 'name2');\n\n    /// Test your functions\n    controller.changeName();\n    expect(controller.name.value, 'name3');\n\n    /// onClose was called\n    Get.delete<Controller>();\n\n    expect(controller.name.value, '');\n  });\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"conseils",children:"Conseils"}),"\n",(0,i.jsx)(n.h5,{id:"mockito-ou-mocktail",children:"Mockito ou mocktail"}),"\n",(0,i.jsx)(n.p,{children:"Si vous avez besoin de bouchonner votre GetxController/GetxService, vous devriez \xe9tendre GetxController, et le m\xe9langer avec Mock, de cette fa\xe7on"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"class NotificationServiceMock extends GetxService with Mock implements NotificationService {}\n"})}),"\n",(0,i.jsx)(n.h5,{id:"utiliser-la-fonction-getreset",children:"Utiliser la fonction Get.reset()"}),"\n",(0,i.jsx)(n.p,{children:"Si vous testez des widgets, ou des groupes de test, utilisez Get. \xe0 la fin de votre test ou dans tearDown pour r\xe9initialiser tous les param\xe8tres de votre test pr\xe9c\xe9dent."}),"\n",(0,i.jsx)(n.h5,{id:"gettestmode",children:"Get.testMode"}),"\n",(0,i.jsxs)(n.p,{children:["si vous utilisez votre navigation dans vos contr\xf4leurs, utilisez ",(0,i.jsx)(n.code,{children:"Get.testMode = true"})," au d\xe9but de votre main."]}),"\n",(0,i.jsx)(n.h1,{id:"interruption-des-changements-\xe0-partir-de-20",children:"Interruption des changements \xe0 partir de 2.0"}),"\n",(0,i.jsx)(n.p,{children:"1- Types Rx :"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Avant"}),(0,i.jsx)(n.th,{children:"Apr\xe8s"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"StringX"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"RxString"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"IntX"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"RxInt"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"MapX"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"RxMap"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Liste X"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"RxList"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Nombre de unnamed@@0"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"RxNum"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"DoubleX"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"RxDouble"})})]})]})]}),"\n",(0,i.jsx)(n.p,{children:"RxController et GetBuilder ont maintenant fusionn\xe9, vous n'avez plus besoin de m\xe9moriser quel contr\xf4leur vous voulez utiliser, il suffit d'utiliser GetxController, il fonctionnera pour une gestion simple de l'\xe9tat et pour la r\xe9active aussi."}),"\n",(0,i.jsx)(n.p,{children:"2- NamedRoutes\nAvant:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"GetMaterialApp(\n  namedRoutes: {\n    '/': GetRoute(page: Home()),\n  }\n)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Maintenant :"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"GetMaterialApp(\n  getPages: [\n    GetPage(name: '/', page: () => Home()),\n  ]\n)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Pourquoi ce changement ?\nSouvent, il peut \xeatre n\xe9cessaire de d\xe9cider quelle page sera affich\xe9e \xe0 partir d'un param\xe8tre, ou un jeton de connexion, l'approche pr\xe9c\xe9dente \xe9tait inflexible, car elle ne l'autorisait pas.\nL'insertion de la page dans une fonction a consid\xe9rablement r\xe9duit la consommation de m\xe9moire, car les routes ne seront pas allou\xe9es en m\xe9moire depuis que l'application a \xe9t\xe9 d\xe9marr\xe9e, et elle a \xe9galement permis de faire ce type d'approche :"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"\nGetStorage box = GetStorage();\n\nGetMaterialApp(\n  getPages: [\n    GetPage(name: '/', page:(){\n      return box.hasData('token') ? Home() : Login();\n    })\n  ]\n)\n"})})]})}function u(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>l,a:()=>a});var i=t(7294);const r={},s=i.createContext(r);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);