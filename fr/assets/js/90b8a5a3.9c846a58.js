"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[311],{539:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>c,frontMatter:()=>a,metadata:()=>r,toc:()=>u});var t=s(5893),i=s(1151);const a={sidebar_position:3},l="D\xe9pendance",r={id:"pillars/dependency-management",title:"D\xe9pendance",description:"Get a un gestionnaire de d\xe9pendances simple et puissant qui vous permet de r\xe9cup\xe9rer la m\xeame classe que votre Bloc ou contr\xf4leur avec seulement 1 ligne de code, pas de contexte de fournisseur, pas de Widget h\xe9rit\xe9 :",source:"@site/i18n/fr/docusaurus-plugin-content-docs/current/pillars/dependency-management.md",sourceDirName:"pillars",slug:"/pillars/dependency-management",permalink:"/getx/fr/docs/pillars/dependency-management",draft:!1,unlisted:!1,editUrl:"https://github.com/jonataslaw/getx/docs/pillars/dependency-management.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Itin\xe9raire",permalink:"/getx/fr/docs/pillars/route-management"},next:{title:"Utils",permalink:"/getx/fr/docs/utils"}},o={},u=[{value:"M\xe9thodes d&#39;instanciation",id:"m\xe9thodes-dinstanciation",level:2},{value:"Get.put()",id:"getput",level:3},{value:"Get.lazyPut",id:"getlazyput",level:3},{value:"Get.putAsync",id:"getputasync",level:3},{value:"Get.create",id:"getcreate",level:3},{value:"Utilisation de m\xe9thodes et de classes instanci\xe9es",id:"utilisation-de-m\xe9thodes-et-de-classes-instanci\xe9es",level:2},{value:"Sp\xe9cifier une instance alternative",id:"sp\xe9cifier-une-instance-alternative",level:2},{value:"Diff\xe9rences entre les m\xe9thodes",id:"diff\xe9rences-entre-les-m\xe9thodes",level:2},{value:"Liens",id:"liens",level:2},{value:"Classe de liaisons",id:"classe-de-liaisons",level:3},{value:"Constructeur de liens",id:"constructeur-de-liens",level:3},{value:"Gestion intelligente",id:"gestion-intelligente",level:3},{value:"Comment changer",id:"comment-changer",level:4},{value:"Compl\xe8tement",id:"compl\xe8tement",level:4},{value:"Seulement le constructeur",id:"seulement-le-constructeur",level:4},{value:"Usine de gestion intelligente",id:"usine-de-gestion-intelligente",level:4},{value:"Comment les liaisons fonctionnent sous la capuche",id:"comment-les-liaisons-fonctionnent-sous-la-capuche",level:3},{value:"Notes",id:"notes",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"d\xe9pendance",children:"D\xe9pendance"}),"\n",(0,t.jsx)(n.p,{children:"Get a un gestionnaire de d\xe9pendances simple et puissant qui vous permet de r\xe9cup\xe9rer la m\xeame classe que votre Bloc ou contr\xf4leur avec seulement 1 ligne de code, pas de contexte de fournisseur, pas de Widget h\xe9rit\xe9 :"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"Controller controller = Get.put(Controller()); // Rather Controller controller = Controller();\n"})}),"\n",(0,t.jsx)(n.p,{children:"Au lieu d'instancier votre classe dans la classe que vous utilisez, vous l'instanciez dans l'instance Get qui le rendra disponible dans votre application.\nVous pouvez donc utiliser votre contr\xf4leur (ou classe Bloc) normalement"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Remarque : Si vous utilisez Get's State Manager, pr\xeatez plus d'attention \xe0 l'API ",(0,t.jsx)(n.a,{href:"#bindings",children:"Bindings"}),", qui facilitera la connexion de votre vue \xe0 votre contr\xf4leur."]}),"\n",(0,t.jsx)(n.li,{children:"Note2: Obtenir la gestion des d\xe9pendances est d\xe9clou\xe9 \xe0 partir d'autres parties du paquet, donc si par exemple votre application utilise d\xe9j\xe0 un gestionnaire d'\xe9tat (n'importe qui, n'importe quel, cela n'a aucune importance), vous n'avez pas besoin de changer cela, vous pouvez utiliser ce gestionnaire d'injection de d\xe9pendances sans aucun probl\xe8me"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"m\xe9thodes-dinstanciation",children:"M\xe9thodes d'instanciation"}),"\n",(0,t.jsx)(n.p,{children:"Les m\xe9thodes et ses param\xe8tres configurables sont :"}),"\n",(0,t.jsx)(n.h3,{id:"getput",children:"Get.put()"}),"\n",(0,t.jsx)(n.p,{children:"La fa\xe7on la plus courante d'ins\xe9rer une d\xe9pendance. Bon pour les contr\xf4leurs de vos points de vue, par exemple."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:'Get.put<SomeClass>(SomeClass());\nGet.put<LoginController>(LoginController(), permanent: true);\nGet.put<ListItemController>(ListItemController, tag: "some unique string");\n'})}),"\n",(0,t.jsx)(n.p,{children:"Ceci est toutes les options que vous pouvez d\xe9finir lors de l'utilisation de put:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:'Get.put<S>(\n  // mandatory: the class that you want to get to save, like a controller or anything\n  // note: "S" means that it can be a class of any type\n  S dependency\n\n  // optional: this is for when you want multiple classess that are of the same type\n  // since you normally get a class by using Get.find<Controller>(),\n  // you need to use tag to tell which instance you need\n  // must be unique string\n  String tag,\n\n  // optional: by default, get will dispose instances after they are not used anymore (example,\n  // the controller of a view that is closed), but you might need that the instance\n  // to be kept there throughout the entire app, like an instance of sharedPreferences or something\n  // so you use this\n  // defaults to false\n  bool permanent = false,\n\n  // optional: allows you after using an abstract class in a test, replace it with another one and follow the test.\n  // defaults to false\n  bool overrideAbstract = false,\n\n  // optional: allows you to create the dependency using function instead of the dependency itself.\n  // this one is not commonly used\n  InstanceBuilderCallback<S> builder,\n)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"getlazyput",children:"Get.lazyPut"}),"\n",(0,t.jsx)(n.p,{children:"Il est possible de lazyLoad une d\xe9pendance pour qu'elle ne soit instanci\xe9e que lorsqu'elle est utilis\xe9e. Tr\xe8s utile pour les classes co\xfbteuses de calcul ou si vous voulez instancier plusieurs classes en un seul endroit (comme dans une classe de liaisons) et vous savez que vous n'allez pas utiliser cette classe \xe0 ce moment-l\xe0."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"/// ApiMock will only be called when someone uses Get.find<ApiMock> for the first time\nGet.lazyPut<ApiMock>(() => ApiMock());\n\nGet.lazyPut<FirebaseAuth>(\n  () {\n    // ... some logic if needed\n    return FirebaseAuth();\n  },\n  tag: Math.random().toString(),\n  fenix: true\n)\n\nGet.lazyPut<Controller>( () => Controller() )\n"})}),"\n",(0,t.jsx)(n.p,{children:"Ceci est toutes les options que vous pouvez d\xe9finir lors de l'utilisation de lazyPut:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:'Get.lazyPut<S>(\n  // mandatory: a method that will be executed when your class is called for the first time\n  InstanceBuilderCallback builder,\n  \n  // optional: same as Get.put(), it is used for when you want multiple different instance of a same class\n  // must be unique\n  String tag,\n\n  // optional: It is similar to "permanent", the difference is that the instance is discarded when\n  // is not being used, but when it\'s use is needed again, Get will recreate the instance\n  // just the same as "SmartManagement.keepFactory" in the bindings api\n  // defaults to false\n  bool fenix = false\n  \n)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"getputasync",children:"Get.putAsync"}),"\n",(0,t.jsxs)(n.p,{children:["Si vous voulez enregistrer une instance asynchrone, vous pouvez utiliser ",(0,t.jsx)(n.code,{children:"Get.putAsync"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"Get.putAsync<SharedPreferences>(() async {\n  final prefs = await SharedPreferences.getInstance();\n  await prefs.setInt('counter', 12345);\n  return prefs;\n});\n\nGet.putAsync<YourAsyncClass>( () async => await YourAsyncClass() )\n"})}),"\n",(0,t.jsx)(n.p,{children:"Ceci est toutes les options que vous pouvez d\xe9finir en utilisant putAsync:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"Get.putAsync<S>(\n\n  // mandatory: an async method that will be executed to instantiate your class\n  AsyncInstanceBuilderCallback<S> builder,\n\n  // optional: same as Get.put(), it is used for when you want multiple different instance of a same class\n  // must be unique\n  String tag,\n\n  // optional: same as in Get.put(), used when you need to maintain that instance alive in the entire app\n  // defaults to false\n  bool permanent = false\n)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"getcreate",children:"Get.create"}),"\n",(0,t.jsxs)(n.p,{children:["Celui-ci est d\xe9licat. Une explication d\xe9taill\xe9e de ce qu'est et des diff\xe9rences entre les autres peut \xeatre trouv\xe9e dans la section ",(0,t.jsx)(n.a,{href:"#differences-entre-m%C3%A9thodes",children:"Diff\xe9rences entre les m\xe9thodes :"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"Get.Create<SomeClass>(() => SomeClass());\nGet.Create<LoginController>(() => LoginController());\n"})}),"\n",(0,t.jsx)(n.p,{children:"Ceci est toutes les options que vous pouvez d\xe9finir lors de l'utilisation de la cr\xe9ation :"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:'Get.create<S>(\n  // required: a function that returns a class that will be "fabricated" every\n  // time `Get.find()` is called\n  // Example: Get.create<YourClass>(() => YourClass())\n  FcBuilderFunc<S> builder,\n\n  // optional: just like Get.put(), but it is used when you need multiple instances\n  // of a of a same class\n  // Useful in case you have a list that each item need it\'s own controller\n  // needs to be a unique string. Just change from tag to name\n  String name,\n\n  // optional: just like int`Get.put()`, it is for when you need to keep the\n  // instance alive thoughout the entire app. The difference is in Get.create\n  // permanent is true by default\n  bool permanent = true\n'})}),"\n",(0,t.jsx)(n.h2,{id:"utilisation-de-m\xe9thodes-et-de-classes-instanci\xe9es",children:"Utilisation de m\xe9thodes et de classes instanci\xe9es"}),"\n",(0,t.jsx)(n.p,{children:"Imaginez que vous ayez parcouru de nombreux itin\xe9raires, et que vous ayez besoin de donn\xe9es laiss\xe9es derri\xe8re vous dans votre contr\xf4leur, vous auriez besoin d'un gestionnaire d'\xe9tat combin\xe9 avec le Provider ou Get_it, correct ? Pas avec Get. Il vous suffit de demander \xe0 Get to \"find\" pour votre contr\xf4leur, vous n'avez pas besoin de d\xe9pendances suppl\xe9mentaires :"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"final controller = Get.find<Controller>();\n// OR\nController controller = Get.find();\n\n// Yes, it looks like Magic, Get will find your controller, and will deliver it to you.\n// You can have 1 million controllers instantiated, Get will always give you the right controller.\n"})}),"\n",(0,t.jsx)(n.p,{children:"Et puis vous serez en mesure de r\xe9cup\xe9rer les donn\xe9es de votre contr\xf4leur qui y ont \xe9t\xe9 obtenues :"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"Text(controller.textFromApi);\n"})}),"\n",(0,t.jsx)(n.p,{children:"Puisque la valeur retourn\xe9e est une classe normale, vous pouvez faire tout ce que vous voulez:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"int count = Get.find<SharedPreferences>().getInt('counter');\nprint(count); // out: 12345\n"})}),"\n",(0,t.jsx)(n.p,{children:"Pour supprimer une instance de Get:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"Get.delete<Controller>(); //usually you don't need to do this because GetX already delete unused controllers\n"})}),"\n",(0,t.jsx)(n.h2,{id:"sp\xe9cifier-une-instance-alternative",children:"Sp\xe9cifier une instance alternative"}),"\n",(0,t.jsxs)(n.p,{children:["Une instance actuellement ins\xe9r\xe9e peut \xeatre remplac\xe9e par une instance de classe similaire ou \xe9tendue en utilisant la m\xe9thode ",(0,t.jsx)(n.code,{children:"replace"})," ou ",(0,t.jsx)(n.code,{children:"lazyReplace"}),". Cela peut ensuite \xeatre r\xe9cup\xe9r\xe9 en utilisant la classe originale."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"abstract class BaseClass {}\nclass ParentClass extends BaseClass {}\n\nclass ChildClass extends ParentClass {\n  bool isChild = true;\n}\n\n\nGet.put<BaseClass>(ParentClass());\n\nGet.replace<BaseClass>(ChildClass());\n\nfinal instance = Get.find<BaseClass>();\nprint(instance is ChildClass); //true\n\n\nclass OtherClass extends BaseClass {}\nGet.lazyReplace<BaseClass>(() => OtherClass());\n\nfinal instance = Get.find<BaseClass>();\nprint(instance is ChildClass); // false\nprint(instance is OtherClass); //true\n"})}),"\n",(0,t.jsx)(n.h2,{id:"diff\xe9rences-entre-les-m\xe9thodes",children:"Diff\xe9rences entre les m\xe9thodes"}),"\n",(0,t.jsxs)(n.p,{children:["Tout d'abord, nous allons du ",(0,t.jsx)(n.code,{children:"fenix"})," de Get.lazyPut et du ",(0,t.jsx)(n.code,{children:"permanent"})," des autres m\xe9thodes."]}),"\n",(0,t.jsxs)(n.p,{children:["La diff\xe9rence fondamentale entre ",(0,t.jsx)(n.code,{children:"permanent"})," et ",(0,t.jsx)(n.code,{children:"fenix"})," est la fa\xe7on dont vous voulez stocker vos instances."]}),"\n",(0,t.jsxs)(n.p,{children:["Renforcement : par d\xe9faut, GetX supprime les instances quand elles ne sont pas utilis\xe9es.\nCela signifie que : si l'\xe9cran 1 a un contr\xf4leur 1 et que l'\xe9cran 2 a un contr\xf4leur 2 et que vous retirez la premi\xe8re route de la pile, (comme si vous utilisez ",(0,t.jsx)(n.code,{children:"Get. ff()"})," ou ",(0,t.jsx)(n.code,{children:"Get.offNamed()"}),") le contr\xf4leur 1 a perdu son utilisation, donc il sera effac\xe9."]}),"\n",(0,t.jsxs)(n.p,{children:["Mais si vous voulez utiliser ",(0,t.jsx)(n.code,{children:"permanent:true"}),", alors le contr\xf4leur ne sera pas perdu dans cette transition - ce qui est tr\xe8s utile pour les services que vous voulez garder en vie tout au long de l'application."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"fenix"})," dans l'autre main est pour les services que vous ne vous inqui\xe9tez pas de perdre entre les changements d'\xe9cran, mais quand vous avez besoin de ce service, vous vous attendez \xe0 ce qu'il soit vivant. Donc, en gros, il va disposer le contr\xf4leur, service/classe inutilis\xe9, mais quand vous en avez besoin, il \"recr\xe9era \xe0 partir des cendres\" une nouvelle instance."]}),"\n",(0,t.jsx)(n.p,{children:"Proc\xe9der avec les diff\xe9rences entre les m\xe9thodes :"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Get.put et Get. utAsync suit le m\xeame ordre de cr\xe9ation, avec la diff\xe9rence que la seconde utilise une m\xe9thode asynchrone : ces deux m\xe9thodes cr\xe9ent et initialisent l'instance. Celui-ci est ins\xe9r\xe9 directement dans la m\xe9moire, en utilisant la m\xe9thode interne ",(0,t.jsx)(n.code,{children:"insert"})," avec les param\xe8tres ",(0,t.jsx)(n.code,{children:"permanent: false"})," et ",(0,t.jsx)(n.code,{children:"isSingleton: true"})," (ce param\xe8tre isSingleton seul a pour but de dire si c'est d'utiliser la d\xe9pendance sur ",(0,t.jsx)(n.code,{children:"dependency"})," ou s'il est d'utiliser la d\xe9pendance sur ",(0,t.jsx)(n.code,{children:"FcBuilderFunc"}),"). Apr\xe8s cela, ",(0,t.jsx)(n.code,{children:"Get.find()"})," est appel\xe9 qui initialise imm\xe9diatement les instances qui sont en m\xe9moire."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:['Get.create: Comme le nom l\'indique, il va "cr\xe9er" votre d\xe9pendance! Similaire \xe0 ',(0,t.jsx)(n.code,{children:"Get.put()"}),", il appelle \xe9galement la m\xe9thode interne ",(0,t.jsx)(n.code,{children:"insert"})," pour l'instance. Mais ",(0,t.jsx)(n.code,{children:"permanent"})," est devenu vrai et ",(0,t.jsx)(n.code,{children:"isSingleton"})," est devenu faux (puisque nous \"cr\xe9on\" notre d\xe9pendance, il n'y a aucun moyen pour que ce soit une instance de singleton, c'est pourquoi c'est faux). Et parce qu'il a ",(0,t.jsx)(n.code,{children:"permanent: true"}),", nous avons par d\xe9faut l'avantage de ne pas le perdre entre les \xe9crans ! Aussi, ",(0,t.jsx)(n.code,{children:"Get.find()"})," n'est pas appel\xe9 imm\xe9diatement, il attend d'\xeatre utilis\xe9 dans l'\xe9cran pour \xeatre appel\xe9. Il est cr\xe9\xe9 de cette fa\xe7on pour utiliser le param\xe8tre ",(0,t.jsx)(n.code,{children:"permanent"}),", depuis lors, il vaut la peine de le remarquer, ",(0,t.jsx)(n.code,{children:"Get. reate()"})," a \xe9t\xe9 fait avec le but de cr\xe9er des instances non partag\xe9es, mais ne pas \xeatre dispos\xe9, comme par exemple un bouton dans une listView, que vous voulez une instance unique pour cette liste - \xe0 cause de cela, Get. reate doit \xeatre utilis\xe9 avec GetWidget."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Get.lazyPut: Comme le nom l'indique, c'est un processus paresseux. L'instance est cr\xe9\xe9e, mais elle n'est pas appel\xe9e \xe0 \xeatre utilis\xe9e imm\xe9diatement, elle reste en attente d'\xeatre appel\xe9e. Contrairement aux autres m\xe9thodes, ",(0,t.jsx)(n.code,{children:"insert"})," n'est pas appel\xe9 ici. \xc0 la place, l'instance est ins\xe9r\xe9e dans une autre partie de la m\xe9moire, une partie responsable de savoir si l'instance peut \xeatre recr\xe9\xe9e ou non, appelons-la \"usine\". Si nous voulons cr\xe9er quelque chose \xe0 utiliser plus tard, il ne sera pas m\xe9lang\xe9 avec les choses qui ont \xe9t\xe9 utilis\xe9es pour le moment. Et voici o\xf9 la magie ",(0,t.jsx)(n.code,{children:"fenix"})," entre : si vous choisissez de quitter ",(0,t.jsx)(n.code,{children:"fenix: false"}),", et que votre ",(0,t.jsx)(n.code,{children:"smartManagement"})," ne sont pas ",(0,t.jsx)(n.code,{children:"keepFactory"}),", alors lorsque vous utilisez ",(0,t.jsx)(n.code,{children:"Get. ind"})," l'instance changera la place dans la m\xe9moire de l'\"usine\" \xe0 la zone de m\xe9moire commune de l'instance. Juste apr\xe8s, par d\xe9faut, il est retir\xe9 de l'\"usine\". Maintenant, si vous choisissez ",(0,t.jsx)(n.code,{children:"fenix: true"}),", l'instance continue d'exister dans cette partie d\xe9di\xe9e, m\xeame en allant dans l'espace commun, pour \xeatre appel\xe9 \xe0 nouveau \xe0 l'avenir."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"liens",children:"Liens"}),"\n",(0,t.jsx)(n.p,{children:"Un des grands diff\xe9rentiels de ce paquet, peut-\xeatre, est la possibilit\xe9 d'une int\xe9gration compl\xe8te des routes, du gestionnaire d'\xe9tat et du gestionnaire de d\xe9pendances.\nLorsqu'une route est retir\xe9e de la pile, tous les contr\xf4leurs, toutes les variables et les instances d'objets qui y sont li\xe9s sont retir\xe9s de la m\xe9moire. Si vous utilisez des flux ou des chronom\xe8tres, ils seront ferm\xe9s automatiquement, et vous n'avez pas \xe0 vous inqui\xe9ter \xe0 ce sujet.\nDans la version 2.10 Obtenir compl\xe8tement impl\xe9ment\xe9 l'API Bindings.\nMaintenant vous n'avez plus besoin d'utiliser la m\xe9thode d'initialisation. Vous n'avez m\xeame pas \xe0 taper vos contr\xf4leurs si vous ne le voulez pas. Vous pouvez d\xe9marrer vos contr\xf4leurs et vos services \xe0 l'endroit appropri\xe9 pour cela.\nLa classe Binding est une classe qui d\xe9couplera l'injection de d\xe9pendance, tout en \"liant\" les routes vers le gestionnaire d'\xe9tat et le gestionnaire de d\xe9pendances.\nCela permet de savoir quel \xe9cran est affich\xe9 quand un contr\xf4leur particulier est utilis\xe9 et de savoir o\xf9 et comment s'en d\xe9barrasser.\nDe plus, la classe Binding vous permettra d'avoir un contr\xf4le de configuration de SmartManager. Vous pouvez configurer les d\xe9pendances \xe0 organiser lors de la suppression d'une route de la pile, ou lorsque le widget qui l'a utilis\xe9 est mis en page, ni l'un ni l'autre. Vous aurez une gestion intelligente des d\xe9pendances qui fonctionne pour vous, mais malgr\xe9 cela, vous pouvez le configurer comme vous le souhaitez."}),"\n",(0,t.jsx)(n.h3,{id:"classe-de-liaisons",children:"Classe de liaisons"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Cr\xe9er une classe et impl\xe9menter la liaison"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"class HomeBinding implements Bindings {}\n"})}),"\n",(0,t.jsx)(n.p,{children:'Votre IDE vous demandera automatiquement d\'outrepasser la m\xe9thode "d\xe9pendances", et il vous suffit de cliquer sur la lampe, outrepasser la m\xe9thode et ins\xe9rer toutes les classes que vous allez utiliser sur cette route :'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"class HomeBinding implements Bindings {\n  @override\n  void dependencies() {\n    Get.lazyPut<HomeController>(() => HomeController());\n    Get.put<Service>(()=> Api());\n  }\n}\n\nclass DetailsBinding implements Bindings {\n  @override\n  void dependencies() {\n    Get.lazyPut<DetailsController>(() => DetailsController());\n  }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Maintenant, il vous suffit d'informer votre itin\xe9raire, que vous utiliserez cette liaison pour faire la connexion entre le gestionnaire de routes, les d\xe9pendances et les \xe9tats."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Utilisation des routes nomm\xe9es:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"getPages: [\n  GetPage(\n    name: '/',\n    page: () => HomeView(),\n    binding: HomeBinding(),\n  ),\n  GetPage(\n    name: '/details',\n    page: () => DetailsView(),\n    binding: DetailsBinding(),\n  ),\n];\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Utiliser des itin\xe9raires normaux :"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"Get.to(Home(), binding: HomeBinding());\nGet.to(DetailsView(), binding: DetailsBinding())\n"})}),"\n",(0,t.jsx)(n.p,{children:"L\xe0, vous n'avez plus \xe0 vous soucier de la gestion de la m\xe9moire de votre application, Get will do it for vous."}),"\n",(0,t.jsx)(n.p,{children:"La classe de liaison est appel\xe9e lorsqu'une route est appel\xe9e, vous pouvez cr\xe9er un \"initialBinding dans votre GetMaterialApp pour ins\xe9rer toutes les d\xe9pendances qui seront cr\xe9\xe9es."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"GetMaterialApp(\n  initialBinding: SampleBind(),\n  home: Home(),\n);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"constructeur-de-liens",children:"Constructeur de liens"}),"\n",(0,t.jsxs)(n.p,{children:["La fa\xe7on par d\xe9faut de cr\xe9er une liaison est de cr\xe9er une classe qui impl\xe9mente Bindings.\nMais alternativement, vous pouvez utiliser le callback ",(0,t.jsx)(n.code,{children:"BindingsBuilder"})," pour que vous puissiez simplement utiliser une fonction pour instancier ce que vous voulez."]}),"\n",(0,t.jsx)(n.p,{children:"Exemple:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"getPages: [\n  GetPage(\n    name: '/',\n    page: () => HomeView(),\n    binding: BindingsBuilder(() {\n      Get.lazyPut<ControllerX>(() => ControllerX());\n      Get.put<Service>(()=> Api());\n    }),\n  ),\n  GetPage(\n    name: '/details',\n    page: () => DetailsView(),\n    binding: BindingsBuilder(() {\n      Get.lazyPut<DetailsController>(() => DetailsController());\n    }),\n  ),\n];\n"})}),"\n",(0,t.jsx)(n.p,{children:"De cette fa\xe7on, vous pouvez \xe9viter de cr\xe9er une classe de liaison pour chaque route, ce qui rend cela encore plus simple."}),"\n",(0,t.jsx)(n.p,{children:"Les deux fa\xe7ons de faire fonctionnent parfaitement bien et nous voulons que vous utilisiez ce qui convient le mieux \xe0 vos go\xfbts."}),"\n",(0,t.jsx)(n.h3,{id:"gestion-intelligente",children:"Gestion intelligente"}),"\n",(0,t.jsxs)(n.p,{children:["GetX par d\xe9faut dispose des contr\xf4leurs inutilis\xe9s de la m\xe9moire, m\xeame si un \xe9chec se produit et qu'un widget qui l'utilise n'est pas correctement install\xe9.\nC'est ce que l'on appelle le mode ",(0,t.jsx)(n.code,{children:"full"})," de gestion des d\xe9pendances.\nMais si vous voulez changer la fa\xe7on dont GetX contr\xf4le la disposition des classes, vous avez la classe ",(0,t.jsx)(n.code,{children:"SmartManagement"})," que vous pouvez d\xe9finir des comportements diff\xe9rents."]}),"\n",(0,t.jsx)(n.h4,{id:"comment-changer",children:"Comment changer"}),"\n",(0,t.jsx)(n.p,{children:"Si vous voulez modifier cette configuration (ce dont vous n'avez g\xe9n\xe9ralement pas besoin), c'est de cette fa\xe7on :"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"void main () {\n  runApp(\n    GetMaterialApp(\n      smartManagement: SmartManagement.onlyBuilder //here\n      home: Home(),\n    )\n  )\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"compl\xe8tement",children:"Compl\xe8tement"}),"\n",(0,t.jsx)(n.p,{children:"C'est celui par d\xe9faut. \xc9liminer les classes qui ne sont pas utilis\xe9es et qui n'ont pas \xe9t\xe9 configur\xe9es pour \xeatre permanentes. Dans la plupart des cas, vous voudrez garder cette configuration intacte. Si vous d\xe9butez sur GetX, ne changez pas cela."}),"\n",(0,t.jsx)(n.h4,{id:"seulement-le-constructeur",children:"Seulement le constructeur"}),"\n",(0,t.jsxs)(n.p,{children:["Avec cette option, seuls les contr\xf4leurs d\xe9marr\xe9s dans ",(0,t.jsx)(n.code,{children:"init:"})," ou charg\xe9s dans un Binding avec ",(0,t.jsx)(n.code,{children:"Get.lazyPut()"})," seront jet\xe9s."]}),"\n",(0,t.jsxs)(n.p,{children:["Si vous utilisez ",(0,t.jsx)(n.code,{children:"Get.put()"})," ou ",(0,t.jsx)(n.code,{children:"Get.putAsync()"})," ou toute autre approche, SmartManagement n'aura pas les permissions d'exclure cette d\xe9pendance."]}),"\n",(0,t.jsx)(n.p,{children:'Avec le comportement par d\xe9faut, m\xeame les widgets instanci\xe9s avec "Get.put" seront supprim\xe9s, contrairement \xe0 SmartManagement.onlyBuilder.'}),"\n",(0,t.jsx)(n.h4,{id:"usine-de-gestion-intelligente",children:"Usine de gestion intelligente"}),"\n",(0,t.jsx)(n.p,{children:"Tout comme SmartManagement.full, il supprimera ses d\xe9pendances lorsqu'il n'est plus utilis\xe9. Cependant, il conservera leur usine, ce qui signifie qu'il recr\xe9era la d\xe9pendance si vous avez besoin de cette instance \xe0 nouveau."}),"\n",(0,t.jsx)(n.h3,{id:"comment-les-liaisons-fonctionnent-sous-la-capuche",children:"Comment les liaisons fonctionnent sous la capuche"}),"\n",(0,t.jsx)(n.p,{children:"Les liaisons cr\xe9ent des usines transitoires, qui sont cr\xe9\xe9es d\xe8s que vous cliquez pour aller \xe0 un autre \xe9cran, et sera d\xe9truite d\xe8s que l'animation de changement d'\xe9cran aura lieu.\nCela arrive si vite que l'analyseur ne sera m\xeame pas en mesure de l'enregistrer.\nLorsque vous acc\xe9dez \xe0 cet \xe9cran \xe0 nouveau, une nouvelle usine temporaire sera appel\xe9e, donc il est pr\xe9f\xe9rable d'utiliser SmartManagement. eepFactory, mais si vous ne voulez pas cr\xe9er de Bindings, ou si vous voulez garder toutes vos d\xe9pendances sur la m\xeame Lie, cela vous aidera certainement.\nLes usines prennent peu de m\xe9moire, elles ne contiennent pas d'instances, mais une fonction avec la \"forme\" de cette classe que vous voulez.\nCela a un co\xfbt tr\xe8s bas en m\xe9moire, mais puisque le but de cette lib est d'obtenir le maximum de performance possible en utilisant les ressources minimales, Obtenir des suppressions m\xeame les usines par d\xe9faut.\nUtilisez ce qui vous convient le mieux."}),"\n",(0,t.jsx)(n.h2,{id:"notes",children:"Notes"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"NE PAS UTILISER SmartManagement.keepFactory si vous utilisez plusieurs Bindings. Il a \xe9t\xe9 con\xe7u pour \xeatre utilis\xe9 sans Liaison ou avec un seul Liage li\xe9 dans l'initialLiaison de GetMaterialApp."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["L'utilisation de Bindings est compl\xe8tement optionnelle, si vous le souhaitez, vous pouvez utiliser ",(0,t.jsx)(n.code,{children:"Get.put()"})," et ",(0,t.jsx)(n.code,{children:"Get.find()"})," sur les classes qui utilisent un contr\xf4leur donn\xe9 sans aucun probl\xe8me.\nCependant, si vous travaillez avec Services ou toute autre abstraction, je vous recommande d'utiliser Bindings pour une meilleure organisation."]}),"\n"]}),"\n"]})]})}function c(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>r,a:()=>l});var t=s(7294);const i={},a=t.createContext(i);function l(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);