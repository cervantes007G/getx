"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[869],{1923:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var n=s(5893),r=s(1151);const o={sidebar_position:2},i="\xc0 propos de GetX",a={id:"about",title:"\xc0 propos de GetX",description:"- GetX est une solution extr\xeamement l\xe9g\xe8re et puissante pour Flutter. Il combine la gestion de l'\xe9tat de haute performance, l'injection intelligente de d\xe9pendances et la gestion des routes rapidement et pratiquement.",source:"@site/i18n/fr/docusaurus-plugin-content-docs/current/about.md",sourceDirName:".",slug:"/about",permalink:"/getx/fr/docs/about",draft:!1,unlisted:!1,editUrl:"https://github.com/jonataslaw/getx/docs/about.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Commencer",permalink:"/getx/fr/docs/intro"},next:{title:"Concepts",permalink:"/getx/fr/docs/category/concepts"}},u={},l=[{value:"Pourquoi Getx ?",id:"pourquoi-getx-",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"\xe0-propos-de-getx",children:"\xc0 propos de GetX"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.p,{children:"GetX est une solution extr\xeamement l\xe9g\xe8re et puissante pour Flutter. Il combine la gestion de l'\xe9tat de haute performance, l'injection intelligente de d\xe9pendances et la gestion des routes rapidement et pratiquement."}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:["GetX a 3 principes de base. Cela signifie qu'il s'agit de la priorit\xe9 pour toutes les ressources de la biblioth\xe8que : ",(0,n.jsx)(t.strong,{children:"PRODUCTIVIT\xc9, PERFORMANCE ET ORGANISATION."})]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"PERFORMANCE :"})," GetX se concentre sur les performances et la consommation minimale des ressources. GetX n'utilise ni Streams ni ChangeNotifier."]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"PRODUCTIVIT\xc9:"})," GetX utilise une syntaxe facile et agr\xe9able. Peu importe ce que vous voulez faire, il y a toujours un moyen plus simple avec GetX. Cela vous permettra de gagner des heures de d\xe9veloppement et de fournir les performances maximales que votre application peut offrir."]}),"\n",(0,n.jsx)(t.p,{children:"G\xe9n\xe9ralement, le d\xe9veloppeur devrait se soucier de supprimer les contr\xf4leurs de la m\xe9moire. Avec GetX, ce n'est pas n\xe9cessaire car les ressources sont retir\xe9es de la m\xe9moire quand elles ne sont pas utilis\xe9es par d\xe9faut. Si vous voulez le conserver en m\xe9moire, vous devez d\xe9clarer explicitement \"permanent: true\" dans votre d\xe9pendance. De cette fa\xe7on, en plus de gagner du temps, vous risquez moins d'avoir des d\xe9pendances inutiles sur la m\xe9moire. Le chargement des d\xe9pendances est \xe9galement paresseux par d\xe9faut."}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"ORGANISATION :"})," GetX permet le d\xe9couplage total de la vue, de la logique de pr\xe9sentation, de la logique m\xe9tier, de l'injection de d\xe9pendances et de la navigation. Vous n'avez pas besoin de contexte pour naviguer entre les routes, donc vous n'\xeates pas d\xe9pendant de l'arborescence des widgets (visualisation) pour cela. Vous n'avez pas besoin de contexte pour acc\xe9der \xe0 vos contr\xf4leurs/blocs \xe0 travers un h\xe9ritedWidget, donc vous d\xe9connectez compl\xe8tement votre logique de pr\xe9sentation et votre logique m\xe9tier de votre calque de visualisation. Vous n'avez pas besoin d'injecter vos classes Controllers/Models/Blocs dans votre arborescence de widgets via ",(0,n.jsx)(t.code,{children:"MultiProvider"}),"s. Pour cela, GetX utilise sa propre fonction d'injection de d\xe9pendance, d\xe9couplant compl\xe8tement le DI de sa vue."]}),"\n",(0,n.jsx)(t.p,{children:"Avec GetX, vous savez o\xf9 trouver chaque fonctionnalit\xe9 de votre application, avec du code propre par d\xe9faut. En plus de faciliter la maintenance, cela rend le partage de modules quelque chose qui, jusque-l\xe0, dans Flutter \xe9tait impensable, quelque chose de totalement possible.\nBLoC a \xe9t\xe9 un point de d\xe9part pour organiser le code dans Flutter, il s\xe9pare la logique commerciale de la visualisation. GetX est une \xe9volution naturelle de cela, non seulement en s\xe9parant la logique commerciale mais aussi la logique de pr\xe9sentation. Les injections suppl\xe9mentaires de d\xe9pendances et de routes sont \xe9galement d\xe9coupl\xe9es, et la couche de donn\xe9es est hors de tout. Vous savez o\xf9 tout se trouve, et tout cela d'une mani\xe8re plus facile que de construire un monde de bonjour.\nGetX est la fa\xe7on la plus facile, pratique et \xe9volutive de construire des applications hautes performances avec le Flutter SDK. Il a un grand \xe9cosyst\xe8me autour de lui qui fonctionne parfaitement ensemble, il est facile pour les d\xe9butants, et il est pr\xe9cis pour les experts. Il est s\xe9curis\xe9, stable, \xe0 jour et offre une vaste gamme d'API int\xe9gr\xe9es qui ne sont pas pr\xe9sentes dans le SDK Flutter par d\xe9faut."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.p,{children:"GetX n'est pas gonfl\xe9. Il a une multitude de fonctionnalit\xe9s qui vous permettent de commencer \xe0 programmer sans vous soucier de quoi que ce soit, mais chacune de ces fonctionnalit\xe9s est dans des conteneurs s\xe9par\xe9s et ne d\xe9marre qu'apr\xe8s utilisation. Si vous n'utilisez que la gestion d'Etat, seule la gestion d'Etat sera compil\xe9e. Si vous n'utilisez que des routes, rien de la gestion de l'\xc9tat ne sera compil\xe9."}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:["GetX a un \xe9norme \xe9cosyst\xe8me, une grande communaut\xe9, un grand nombre de collaborateurs, et sera maintenu tant que le Flutter existe. GetX aussi est capable d'ex\xe9cuter avec le m\xeame code sur Android, iOS, Web, Mac, Linux, Windows et sur votre serveur.\n",(0,n.jsxs)(t.strong,{children:["Il est possible de r\xe9utiliser compl\xe8tement votre code fait sur le frontend de votre backend avec ",(0,n.jsx)(t.a,{href:"https://github.com/jonataslaw/get_server",children:"Get Server"})]}),"."]}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsxs)(t.strong,{children:["De plus, l'ensemble du processus de d\xe9veloppement peut \xeatre enti\xe8rement automatis\xe9, tant sur le serveur que sur le front-end avec ",(0,n.jsx)(t.a,{href:"https://github.com/jonataslaw/get_cli",children:"Get CLI"})]}),"."]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsxs)(t.strong,{children:["En outre, pour augmenter votre productivit\xe9, nous avons l'extension\n",(0,n.jsx)(t.a,{href:"https://marketplace.visualstudio.com/items?itemName=get-snippets.get-snippets",children:"pour VSCode"})," et ",(0,n.jsx)(t.a,{href:"https://plugins.jetbrains.com/plugin/14975-getx-snippets",children:"l'extension pour Android Studio/Intellij"})]})}),"\n",(0,n.jsx)(t.h2,{id:"pourquoi-getx-",children:"Pourquoi Getx ?"}),"\n",(0,n.jsx)(t.p,{children:"1- Plusieurs fois apr\xe8s une mise \xe0 jour de Flut, beaucoup de vos paquets vont se briser. Parfois, des erreurs de compilation se produisent, des erreurs apparaissent souvent qu'il n'y a toujours aucune r\xe9ponse, et le d\xe9veloppeur a besoin de savoir d'o\xf9 vient l'erreur, suivre l'erreur, puis essayer d'ouvrir un probl\xe8me dans le r\xe9f\xe9rentiel correspondant, et voir son probl\xe8me r\xe9solu. Permet de centraliser les principales ressources de d\xe9veloppement (gestion de l'\xe9tat, de la d\xe9pendance et de la route), vous permettant d'ajouter un seul paquet \xe0 votre pubspec, et de commencer \xe0 travailler. Apr\xe8s une mise \xe0 jour de Fluard, la seule chose \xe0 faire est de mettre \xe0 jour la d\xe9pendance Get et de se mettre au travail. Obtenir r\xe9sout \xe9galement les probl\xe8mes de compatibilit\xe9. Combien de fois une version d'un paquet n'est pas compatible avec la version d'un autre, parce que l'on utilise une d\xe9pendance dans une version, et l'autre dans une autre version ? Ce n'est pas non plus une pr\xe9occupation en utilisant Get, car tout est dans le m\xeame paquet et est enti\xe8rement compatible."}),"\n",(0,n.jsxs)(t.p,{children:["2- Flutter est facile, Flutter est incroyable, mais Flutter a encore quelques boilerplate qui peuvent \xeatre ind\xe9sirables pour la plupart des d\xe9veloppeurs, comme ",(0,n.jsx)(t.code,{children:"Navigator. f(context).push (contexte, constructeur [...]"}),". Obtenir simplifie le d\xe9veloppement. Au lieu d'\xe9crire 8 lignes de code pour simplement appeler une route, tu peux juste le faire: ",(0,n.jsx)(t.code,{children:"Get. o(Home())"})," et vous avez termin\xe9, vous allez \xe0 la page suivante. Les URL web dynamiques sont une chose vraiment douloureuse \xe0 faire avec Flutter actuellement, et cela avec GetX est stupidement simple. La gestion des \xe9tats dans Flutter, et la gestion des d\xe9pendances est \xe9galement quelque chose qui g\xe9n\xe8re beaucoup de discussions, car il y a des centaines de mod\xe8les dans le pub. Mais il n'y a rien d'aussi facile que d'ajouter un \". bs\" \xe0 la fin de votre variable, et placez votre widget \xe0 l'int\xe9rieur d'un Obx, et c'est \xe7a, toutes les mises \xe0 jour de cette variable seront automatiquement mises \xe0 jour \xe0 l'\xe9cran."]}),"\n",(0,n.jsx)(t.p,{children:"3- Faciliter sans se soucier des performances. Les performances de Flutter sont d\xe9j\xe0 incroyables, mais imaginez que vous utilisiez un gestionnaire d'\xe9tat, et un localisateur pour distribuer vos classes de blocs/magasins/contr\xf4leurs/etc. Vous devrez appeler manuellement l'exclusion de cette d\xe9pendance lorsque vous n'en avez pas besoin. Mais avez-vous d\xe9j\xe0 pens\xe9 \xe0 utiliser votre contr\xf4leur, et quand il n'\xe9tait plus utilis\xe9 par personne, il serait tout simplement supprim\xe9 de la m\xe9moire ? C'est ce que fait GetX. Avec SmartManagement, tout ce qui n'est pas utilis\xe9 est supprim\xe9 de la m\xe9moire, et vous ne devriez vous soucier que de la programmation. Vous serez assur\xe9s que vous consommez les ressources minimales n\xe9cessaires, sans m\xeame avoir cr\xe9\xe9 une logique pour cela."}),"\n",(0,n.jsx)(t.p,{children:"4- Le d\xe9couplage effectif. Vous avez peut-\xeatre entendu le concept \"s\xe9parer le point de vue de la logique commerciale\". Ce n'est pas une particularit\xe9 de BLoC, MVC, MVVM, et toute autre norme sur le march\xe9 a ce concept. Cependant, ce concept peut souvent \xeatre att\xe9nu\xe9 dans Flutter en raison de l'utilisation du contexte.\nSi vous avez besoin d'un contexte pour trouver un Widget Inh\xe9rit\xe9, vous en avez besoin dans la vue, ou passez le contexte par param\xe8tre. Je trouve particuli\xe8rement cette solution tr\xe8s moche et pour travailler en \xe9quipe, nous d\xe9pendrons toujours de la logique commerciale de Views. Getx n'est pas orthodoxe avec l'approche standard, et bien qu'il ne bannisse pas compl\xe8tement l'utilisation de StatefulWidgets, InitState, etc. elle a toujours une approche similaire qui peut \xeatre plus propre. Les contr\xf4leurs ont des cycles de vie, et lorsque vous avez besoin de faire une demande APIREST par exemple, vous ne d\xe9pendez pas de quoi que ce soit dans la vue. Vous pouvez utiliser onInit pour lancer un appel http et quand les donn\xe9es arrivent, les variables seront remplies. Comme GetX est compl\xe8tement r\xe9actif (vraiment, et fonctionne sous les streams), une fois que les \xe9l\xe9ments sont remplis, tous les widgets qui utilisent cette variable seront automatiquement mis \xe0 jour dans la vue. Cela permet aux personnes poss\xe9dant l'expertise de l'interface de travailler uniquement avec des widgets, et ne pas avoir \xe0 envoyer quoi que ce soit \xe0 la logique commerciale autre que les \xe9v\xe9nements utilisateur (comme cliquer sur un bouton), tandis que les personnes travaillant avec la logique commerciale seront libres de cr\xe9er et de tester la logique commerciale s\xe9par\xe9ment."}),"\n",(0,n.jsx)(t.p,{children:"Cette biblioth\xe8que sera toujours mise \xe0 jour et en impl\xe9mentant de nouvelles fonctionnalit\xe9s. N\u2019h\xe9sitez pas \xe0 proposer des RP et \xe0 y contribuer."})]})}function c(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},1151:(e,t,s)=>{s.d(t,{Z:()=>a,a:()=>i});var n=s(7294);const r={},o=n.createContext(r);function i(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);