"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[243],{9101:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>u});var r=s(5893),t=s(1151);const i={sidebar_position:1},l="\xc9tat",a={id:"pillars/state-management",title:"\xc9tat",description:"GetX n'utilise pas Streams ou ChangeNotifier comme d'autres gestionnaires d'\xe9tat. Pourquoi? En plus de construire des applications pour android, iOS, web, fen\xeatres, macos et linux, Avec GetX, vous pouvez construire des applications serveur avec la m\xeame syntaxe que Flutter/GetX. Afin d'am\xe9liorer le temps de r\xe9ponse et de r\xe9duire la consommation de RAM, nous avons cr\xe9\xe9 GetValue et GetStream, qui sont des solutions de faible latence qui offrent beaucoup de performances, \xe0 un faible co\xfbt d'exploitation. Nous utilisons cette base pour construire toutes nos ressources, y compris la gestion de l'Etat.",source:"@site/i18n/fr/docusaurus-plugin-content-docs/current/pillars/state-management.md",sourceDirName:"pillars",slug:"/pillars/state-management",permalink:"/getx/fr/docs/pillars/state-management",draft:!1,unlisted:!1,editUrl:"https://github.com/jonataslaw/getx/docs/pillars/state-management.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"The 3 Pillars",permalink:"/getx/fr/docs/category/the-3-pillars"},next:{title:"Itin\xe9raire",permalink:"/getx/fr/docs/pillars/route-management"}},o={},u=[{value:"Gestionnaire d&#39;\xe9tat r\xe9actif",id:"gestionnaire-d\xe9tat-r\xe9actif",level:2},{value:"Avantages",id:"avantages",level:3},{value:"Performance maximale :",id:"performance-maximale-",level:3},{value:"D\xe9clarer une variable r\xe9active",id:"d\xe9clarer-une-variable-r\xe9active",level:3},{value:"Avoir un \xe9tat r\xe9actif est facile.",id:"avoir-un-\xe9tat-r\xe9actif-est-facile",level:5},{value:"Utilisation des valeurs dans la vue",id:"utilisation-des-valeurs-dans-la-vue",level:3},{value:"Conditions \xe0 reconstruire",id:"conditions-\xe0-reconstruire",level:3},{value:"O\xf9 les .obs peuvent \xeatre utilis\xe9s",id:"o\xf9-les-obs-peuvent-\xeatre-utilis\xe9s",level:3},{value:"Note sur les listes",id:"note-sur-les-listes",level:3},{value:"Pourquoi je dois utiliser .value",id:"pourquoi-je-dois-utiliser-value",level:3},{value:"Obx()",id:"obx",level:3},{value:"Collaborateurs-trices",id:"collaborateurs-trices",level:3},{value:"Gestionnaire d&#39;\xe9tat simple",id:"gestionnaire-d\xe9tat-simple",level:2},{value:"Avantages",id:"avantages-1",level:3},{value:"Usage",id:"usage",level:3},{value:"Comment g\xe9rer les contr\xf4leurs",id:"comment-g\xe9rer-les-contr\xf4leurs",level:3},{value:"Vous n&#39;aurez plus besoin de StatefulWidgets",id:"vous-naurez-plus-besoin-de-statefulwidgets",level:3},{value:"Pourquoi il existe",id:"pourquoi-il-existe",level:3},{value:"Autres fa\xe7ons de l&#39;utiliser",id:"autres-fa\xe7ons-de-lutiliser",level:3},{value:"IDs uniques",id:"ids-uniques",level:3},{value:"M\xe9langer les deux gestionnaires d&#39;\xe9tat",id:"m\xe9langer-les-deux-gestionnaires-d\xe9tat",level:2},{value:"Mixin",id:"mixin",level:2},{value:"GetBuilder vs GetX vs Obx vs MixinBuilder",id:"getbuilder-vs-getx-vs-obx-vs-mixinbuilder",level:2}];function c(e){const n={blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h5:"h5",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"\xe9tat",children:"\xc9tat"}),"\n",(0,r.jsx)(n.p,{children:"GetX n'utilise pas Streams ou ChangeNotifier comme d'autres gestionnaires d'\xe9tat. Pourquoi? En plus de construire des applications pour android, iOS, web, fen\xeatres, macos et linux, Avec GetX, vous pouvez construire des applications serveur avec la m\xeame syntaxe que Flutter/GetX. Afin d'am\xe9liorer le temps de r\xe9ponse et de r\xe9duire la consommation de RAM, nous avons cr\xe9\xe9 GetValue et GetStream, qui sont des solutions de faible latence qui offrent beaucoup de performances, \xe0 un faible co\xfbt d'exploitation. Nous utilisons cette base pour construire toutes nos ressources, y compris la gestion de l'Etat."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"Complexity"}),": Certains gestionnaires d'\xe9tat sont complexes et ont beaucoup de boilerplate. Avec GetX, vous n'avez pas \xe0 d\xe9finir de classe pour chaque \xe9v\xe9nement, le code est tr\xe8s propre et clair, et vous faites beaucoup plus en \xe9crivant moins. De nombreuses personnes ont abandonn\xe9 Flutter \xe0 cause de ce sujet et elles ont enfin une solution stupidement simple pour g\xe9rer les \xc9tats."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"Aucun g\xe9n\xe9rateur de code"}),": Vous passez la moiti\xe9 de votre temps de d\xe9veloppement \xe0 \xe9crire votre logique d'application. Certains gestionnaires d'\xe9tat comptent sur des g\xe9n\xe9rateurs de code pour avoir du code lisible au minimum. Changer une variable et avoir \xe0 ex\xe9cuter build_runner peut \xeatre improductif, et souvent le temps d'attente apr\xe8s un nettoyage flottant sera long, et vous devrez boire beaucoup de caf\xe9."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Avec GetX, tout est r\xe9actif, et rien ne d\xe9pend des g\xe9n\xe9rateurs de code, ce qui augmente votre productivit\xe9 dans tous les aspects de votre d\xe9veloppement."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"_Cela ne d\xe9pend pas du contexte : Vous avez probablement d\xe9j\xe0 besoin d'envoyer le contexte de votre vue \xe0 un contr\xf4leur, faire le couplage de la vue avec la logique de votre entreprise. Vous avez probablement d\xfb utiliser une d\xe9pendance pour un endroit sans contexte, et a d\xfb passer le contexte \xe0 travers diverses classes et fonctions. Cela n'existe pas avec GetX. Vous avez acc\xe8s \xe0 vos contr\xf4leurs depuis vos contr\xf4leurs sans contexte. Vous n'avez pas besoin d'envoyer le contexte par param\xe8tre pour litt\xe9ralement rien."}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"Contr\xf4le granulaire"}),": la plupart des gestionnaires d'\xe9tat sont bas\xe9s sur ChangeNotifier. ChangeNotifier avertira tous les widgets qui d\xe9pendent de lui quand notifyListeners est appel\xe9. Si vous avez 40 widgets sur un \xe9cran, qui ont une variable de votre classe ChangeNotifier, lorsque vous mettez \xe0 jour un, tous ces \xe9l\xe9ments seront reconstruits."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Avec GetX, m\xeame les widgets imbriqu\xe9s sont respect\xe9s. Si vous avez Obx surveillant votre ListView, et un autre surveillant une case \xe0 cocher dans la ListView, lorsque vous changez la valeur de la case \xe0 cocher, elle sera mise \xe0 jour lorsque vous changerez la valeur de la liste, seule la vue liste sera mise \xe0 jour."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"_Il ne se reconstruit que si sa variable change REALLY : GetX a un contr\xf4le de flux, ce qui signifie que si vous affichez un texte avec 'Paola', si vous changez \xe0 nouveau la variable observable en 'Paola', le widget ne sera pas reconstruit. C'est parce que GetX sait que 'Paola' est d\xe9j\xe0 affich\xe9 dans le texte et ne fera pas de reconstructions inutiles."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"La plupart des gestionnaires d'\xe9tat actuels seront reconstruits \xe0 l'\xe9cran."}),"\n",(0,r.jsx)(n.h2,{id:"gestionnaire-d\xe9tat-r\xe9actif",children:"Gestionnaire d'\xe9tat r\xe9actif"}),"\n",(0,r.jsx)(n.p,{children:"La programmation r\xe9active peut ali\xe9ner de nombreuses personnes parce que l'on dit qu'elle est compliqu\xe9e. GetX transforme la programmation r\xe9active en quelque chose de assez simple :"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Vous n'aurez pas besoin de cr\xe9er des StreamControllers."}),"\n",(0,r.jsx)(n.li,{children:"Vous n'aurez pas besoin de cr\xe9er un StreamBuilder pour chaque variable"}),"\n",(0,r.jsx)(n.li,{children:"Vous n'aurez pas besoin de cr\xe9er une classe pour chaque \xe9tat."}),"\n",(0,r.jsx)(n.li,{children:"Vous n'aurez pas besoin de cr\xe9er un get pour une valeur initiale."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"La programmation r\xe9active avec Get est aussi simple que l'utilisation de setState."}),"\n",(0,r.jsx)(n.p,{children:"Imaginons que vous ayez une variable de nom et que chaque fois que vous la modifiez, tous les widgets qui l'utilisent sont automatiquement chang\xe9s."}),"\n",(0,r.jsx)(n.p,{children:"Ceci est votre variable de compte:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"var name = 'Jonatas Borges';\n"})}),"\n",(0,r.jsx)(n.p,{children:'Pour le rendre observable, il vous suffit d\'ajouter ".obs" \xe0 la fin de celui-ci :'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"var name = 'Jonatas Borges'.obs;\n"})}),"\n",(0,r.jsxs)(n.p,{children:["C'est tout. C'est ",(0,r.jsx)(n.em,{children:"que"})," simple."]}),"\n",(0,r.jsxs)(n.p,{children:['\xc0 partir de maintenant, nous pourrions faire r\xe9f\xe9rence \xe0 ces variables r\xe9active-".obs"(ervables) comme ',(0,r.jsx)(n.em,{children:"Rx"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Qu'avons-nous fait sous le capot? Nous avons cr\xe9\xe9 un ",(0,r.jsx)(n.code,{children:"Stream"})," de ",(0,r.jsx)(n.code,{children:"String"}),"s, assign\xe9 la valeur initiale ",(0,r.jsx)(n.code,{children:'"Jonatas Borges"'})," , nous avons notifi\xe9 \xe0 tous les widgets qui utilisent ",(0,r.jsx)(n.code,{children:'"Jonatas Borges"'})," qu'ils appartiennent maintenant \xe0 cette variable, et quand la valeur ",(0,r.jsx)(n.em,{children:"Rx"})," change, ils devront \xe9galement changer."]}),"\n",(0,r.jsxs)(n.p,{children:["C'est la ",(0,r.jsx)(n.strong,{children:"magie de GetX"}),", gr\xe2ce aux capacit\xe9s de Dart."]}),"\n",(0,r.jsxs)(n.p,{children:["Mais, comme nous le savons, un ",(0,r.jsx)(n.code,{children:"Widget"})," ne peut \xeatre modifi\xe9 que s'il est \xe0 l'int\xe9rieur d'une fonction, parce que les classes statiques n'ont pas la puissance pour \"auto-change\"."]}),"\n",(0,r.jsxs)(n.p,{children:["Vous devrez cr\xe9er un ",(0,r.jsx)(n.code,{children:"StreamBuilder"}),' , vous abonner \xe0 cette variable pour \xe9couter les modifications, et cr\xe9ez une "cascade" de ',(0,r.jsx)(n.code,{children:"StreamBuilder"})," imbriqu\xe9 si vous voulez changer plusieurs variables dans la m\xeame port\xe9e, n'est-ce pas?"]}),"\n",(0,r.jsxs)(n.p,{children:["Non, vous n'avez pas besoin d'un ",(0,r.jsx)(n.code,{children:"StreamBuilder"})," , mais vous avez raison sur les classes statiques."]}),"\n",(0,r.jsxs)(n.p,{children:["Eh bien, du point de vue, nous avons g\xe9n\xe9ralement beaucoup de boilerplate quand nous voulons changer un Widget sp\xe9cifique, c'est la fa\xe7on Flut.\nAvec ",(0,r.jsx)(n.strong,{children:"GetX"})," vous pouvez \xe9galement oublier ce code de la chaudi\xe8re."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"StreamBuilder( \u2026 )"})," ? ",(0,r.jsx)(n.code,{children:"initialValue: \u2026"})," ? ",(0,r.jsx)(n.code,{children:"builder: \u2026"})," ? Non, vous avez juste besoin de placer cette variable \xe0 l'int\xe9rieur d'un Widget ",(0,r.jsx)(n.code,{children:"Obx()"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"Obx (() => Text (controller.name));\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"De quoi avez-vous besoin pour m\xe9moriser ?"})," Seulement ",(0,r.jsx)(n.code,{children:"Obx(() =>"})," ."]}),"\n",(0,r.jsxs)(n.p,{children:["Vous passez juste ce Widget \xe0 travers une fonction de fl\xe8che dans un ",(0,r.jsx)(n.code,{children:"Obx()"}),' (le "Observateur" du ',(0,r.jsx)(n.em,{children:"Rx"}),")."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Obx"})," est assez intelligent, et ne changera que si la valeur de ",(0,r.jsx)(n.code,{children:"controller.name"})," change."]}),"\n",(0,r.jsxs)(n.p,{children:["Si ",(0,r.jsx)(n.code,{children:"name"})," est ",(0,r.jsx)(n.code,{children:'"John"'})," , et que vous le changez en ",(0,r.jsx)(n.code,{children:'"John"'})," ( ",(0,r.jsx)(n.code,{children:'name. alue = "John"'})," ), comme c'est la m\xeame ",(0,r.jsx)(n.code,{children:"valeur"})," qu'avant, rien ne changera \xe0 l'\xe9cran, et ",(0,r.jsx)(n.code,{children:"Obx"})," , pour enregistrer des ressources, ignorera simplement la nouvelle valeur et ne reconstruira pas le Widget. ",(0,r.jsx)(n.strong,{children:"N'est-ce pas incroyable ?"})]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Alors, que se passe-t-il si j'ai 5 variables ",(0,r.jsx)(n.em,{children:"Rx"})," (observables) dans un ",(0,r.jsx)(n.code,{children:"Obx"})," ?"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Cela ne fera que se mettre \xe0 jour quand ",(0,r.jsx)(n.strong,{children:"tout"})," d'entre eux changeront."]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Et si j'ai 30 variables dans une classe, quand je mets \xe0 jour une classe, cela mettra-t-il \xe0 jour ",(0,r.jsx)(n.strong,{children:"toutes"})," les variables qui sont dans cette classe?"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Non, juste le ",(0,r.jsx)(n.strong,{children:"widget sp\xe9cifique"})," qui utilise cette variable ",(0,r.jsx)(n.em,{children:"Rx"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Donc ",(0,r.jsx)(n.strong,{children:"GetX"})," ne met \xe0 jour l'\xe9cran que lorsque la variable ",(0,r.jsx)(n.em,{children:"Rx"})," change sa valeur."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"\nfinal isOpen = false.obs;\n\n// NOTHING will happen... same value.\nvoid onButtonTap() => isOpen.value=false;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"avantages",children:"Avantages"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"GetX()"})," vous aide quand vous avez besoin d'un contr\xf4le ",(0,r.jsx)(n.strong,{children:"granulaire"})," sur ce qui est mis \xe0 jour."]}),"\n",(0,r.jsxs)(n.p,{children:["Si vous n'avez pas besoin de ",(0,r.jsx)(n.code,{children:"unique IDs"}),", car toutes vos variables seront modifi\xe9es lorsque vous effectuerez une action, alors utilisez ",(0,r.jsx)(n.code,{children:"GetBuilder"})," ,\nparce qu'il s'agit d'une mise \xe0 jour d'\xe9tat simple (en blocs, comme ",(0,r.jsx)(n.code,{children:"setState()"})," ), faite en quelques lignes de code.\nIl a \xe9t\xe9 rendu simple, pour avoir le moins d'impact sur le processeur, et juste pour remplir un seul but (un ",(0,r.jsx)(n.em,{children:"\xe9tat"})," reconstruit) et d\xe9penser le minimum de ressources possible."]}),"\n",(0,r.jsxs)(n.p,{children:["Si vous avez besoin d'un gestionnaire d'\xc9tat ",(0,r.jsx)(n.strong,{children:"puissant"})," , vous ne pouvez pas vous tromper avec ",(0,r.jsx)(n.strong,{children:"GetX"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Cela ne fonctionne pas avec des variables, mais ",(0,r.jsx)(n.strong,{children:"flows"}),", tout ce qu'il contient est ",(0,r.jsx)(n.code,{children:"Streams"})," sous le capot."]}),"\n",(0,r.jsxs)(n.p,{children:["Vous pouvez utiliser ",(0,r.jsx)(n.em,{children:"rxDart"})," en conjonction avec elle, car tout est ",(0,r.jsx)(n.code,{children:"Streams"}),",\nvous pouvez \xe9couter l'\xe9v\xe9nement ",(0,r.jsx)(n.code,{children:"event"}),' de chaque variable "',(0,r.jsx)(n.em,{children:"Rx"}),"\",\nparce que tout ce qu'il contient est ",(0,r.jsx)(n.code,{children:"Streams"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Il s'agit litt\xe9ralement d'une approche ",(0,r.jsx)(n.em,{children:"BLoC"}),", plus facile que ",(0,r.jsx)(n.em,{children:"MobX"}),", et sans g\xe9n\xe9rateurs de code ni d\xe9corations.\nTu peux transformer ",(0,r.jsx)(n.strong,{children:"n'importe quoi"})," en un ",(0,r.jsx)(n.em,{children:'"Observable"'})," avec juste un ",(0,r.jsx)(n.code,{children:".obs"})," ."]}),"\n",(0,r.jsx)(n.h3,{id:"performance-maximale-",children:"Performance maximale :"}),"\n",(0,r.jsxs)(n.p,{children:["En plus d'avoir un algorithme intelligent pour les reconstructions minimales, ",(0,r.jsx)(n.strong,{children:"GetX"})," utilise des comparateurs\npour s'assurer que l'\xe9tat a chang\xe9."]}),"\n",(0,r.jsxs)(n.p,{children:["Si vous rencontrez des erreurs dans votre application et que vous envoyez un changement d'\xe9tat en double,\n",(0,r.jsx)(n.strong,{children:"GetX"})," s'assurera qu'il ne plantera pas."]}),"\n",(0,r.jsxs)(n.p,{children:["Avec ",(0,r.jsx)(n.strong,{children:"GetX"})," l'Etat ne change que si la ",(0,r.jsx)(n.code,{children:"valeur"})," change.\nC'est la diff\xe9rence principale entre ",(0,r.jsx)(n.strong,{children:"GetX"})," et l'utilisation de _ ",(0,r.jsx)(n.code,{children:"computed"})," de MobX_.\nEn rejoignant deux ",(0,r.jsx)(n.strong,{children:"observables"}),", et un change; l'\xe9couteur de cette ",(0,r.jsx)(n.em,{children:"observable"})," va \xe9galement changer."]}),"\n",(0,r.jsxs)(n.p,{children:["Avec ",(0,r.jsx)(n.strong,{children:"GetX"}),", si vous rejoignez deux variables, ",(0,r.jsx)(n.code,{children:"GetX()"})," (similaire \xe0 ",(0,r.jsx)(n.code,{children:"Observer()"})," ) ne sera reconstruit que si cela implique un r\xe9el changement d'\xe9tat."]}),"\n",(0,r.jsx)(n.h3,{id:"d\xe9clarer-une-variable-r\xe9active",children:"D\xe9clarer une variable r\xe9active"}),"\n",(0,r.jsx)(n.p,{children:'Vous avez 3 fa\xe7ons de transformer une variable en un "observable".'}),"\n",(0,r.jsxs)(n.p,{children:["1 - Le premier utilise ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"Rx{Type}"})}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"// initial value is recommended, but not mandatory\nfinal name = RxString('');\nfinal isLogged = RxBool(false);\nfinal count = RxInt(0);\nfinal balance = RxDouble(0.0);\nfinal items = RxList<String>([]);\nfinal myMap = RxMap<String, int>({});\n"})}),"\n",(0,r.jsxs)(n.p,{children:["2 - La seconde est d'utiliser ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"Rx"})})," et d'utiliser Darts Generics, ",(0,r.jsx)(n.code,{children:"Rx<Type>"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"final name = Rx<String>('');\nfinal isLogged = Rx<Bool>(false);\nfinal count = Rx<Int>(0);\nfinal balance = Rx<Double>(0.0);\nfinal number = Rx<Num>(0);\nfinal items = Rx<List<String>>([]);\nfinal myMap = Rx<Map<String, int>>({});\n\n// Custom classes - it can be any class, literally\nfinal user = Rx<User>();\n"})}),"\n",(0,r.jsxs)(n.p,{children:["3 - La troisi\xe8me approche, plus pratique, plus facile et pr\xe9f\xe9r\xe9e, ajoute juste ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:".obs"})})," comme propri\xe9t\xe9 de votre ",(0,r.jsx)(n.code,{children:"valeur"})," :"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"final name = ''.obs;\nfinal isLogged = false.obs;\nfinal count = 0.obs;\nfinal balance = 0.0.obs;\nfinal number = 0.obs;\nfinal items = <String>[].obs;\nfinal myMap = <String, int>{}.obs;\n\n// Custom classes - it can be any class, literally\nfinal user = User().obs;\n"})}),"\n",(0,r.jsx)(n.h5,{id:"avoir-un-\xe9tat-r\xe9actif-est-facile",children:"Avoir un \xe9tat r\xe9actif est facile."}),"\n",(0,r.jsxs)(n.p,{children:["Comme nous le savons, ",(0,r.jsx)(n.em,{children:"Dart"})," va maintenant vers ",(0,r.jsx)(n.em,{children:"null safety"}),".\nPour \xeatre pr\xeat, \xe0 partir de maintenant, vous devriez toujours commencer vos variables ",(0,r.jsx)(n.em,{children:"Rx"})," avec une ",(0,r.jsx)(n.strong,{children:"valeur initiale"}),"."]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Transformer une variable en ",(0,r.jsx)(n.em,{children:"observable"})," + ",(0,r.jsx)(n.em,{children:"valeur initiale"})," avec ",(0,r.jsx)(n.strong,{children:"GetX"})," est l'approche la plus simple et la plus pratique."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Vous allez litt\xe9ralement ajouter un \xab .obs\xbb \xe0 la fin de votre variable, et ",(0,r.jsx)(n.strong,{children:"c'est cela"}),", vous l'avez rendu observable,\net son ",(0,r.jsx)(n.code,{children:". alue"})," , eh bien, sera la valeur ",(0,r.jsx)(n.em,{children:"initiale"}),")."]}),"\n",(0,r.jsx)(n.h3,{id:"utilisation-des-valeurs-dans-la-vue",children:"Utilisation des valeurs dans la vue"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"// controller file\nfinal count1 = 0.obs;\nfinal count2 = 0.obs;\nint get sum => count1.value + count2.value;\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"// view file\nGetX<Controller>(\n  builder: (controller) {\n    print(\"count 1 rebuild\");\n    return Text('${controller.count1.value}');\n  },\n),\nGetX<Controller>(\n  builder: (controller) {\n    print(\"count 2 rebuild\");\n    return Text('${controller.count2.value}');\n  },\n),\nGetX<Controller>(\n  builder: (controller) {\n    print(\"count 3 rebuild\");\n    return Text('${controller.sum}');\n  },\n),\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Si nous incr\xe9mentons ",(0,r.jsx)(n.code,{children:"count1.value++"})," , cela affichera :"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"count 1 reconstruction"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"count 3 rebuild"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["parce que ",(0,r.jsx)(n.code,{children:"count1"})," a une valeur de ",(0,r.jsx)(n.code,{children:"1"})," , et ",(0,r.jsx)(n.code,{children:"1 + 0 = 1"})," , en changeant la valeur d'getter ",(0,r.jsx)(n.code,{children:"sum"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Si nous changeons ",(0,r.jsx)(n.code,{children:"count2.value++"})," , cela affichera :"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"count 2 reconstruction"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"count 3 rebuild"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["parce que ",(0,r.jsx)(n.code,{children:"count2.value"})," a chang\xe9, et le r\xe9sultat de la ",(0,r.jsx)(n.code,{children:"sum"})," est maintenant ",(0,r.jsx)(n.code,{children:"2"})," ."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["NOTE: Par d\xe9faut, le tout premier \xe9v\xe9nement reconstruira le widget, m\xeame s'il s'agit de la m\xeame ",(0,r.jsx)(n.code,{children:"valeur"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Ce comportement existe \xe0 cause des variables bool\xe9ennes."}),"\n",(0,r.jsx)(n.p,{children:"Imaginez que vous ayez fait ceci:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"var isLogged = false.obs;\n"})}),"\n",(0,r.jsxs)(n.p,{children:['Et puis, vous avez v\xe9rifi\xe9 si un utilisateur est "connect\xe9" pour d\xe9clencher un \xe9v\xe9nement dans ',(0,r.jsx)(n.code,{children:"ever"})," ."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"@override\nonInit() async {\n  ever(isLogged, fireRoute);\n  isLogged.value = await Preferences.hasToken();\n}\n\nfireRoute(logged) {\n  if (logged) {\n   Get.off(Home());\n  } else {\n   Get.off(Login());\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Si ",(0,r.jsx)(n.code,{children:"hasToken"})," \xe9tait ",(0,r.jsx)(n.code,{children:"false"})," , il n'y aurait aucun changement \xe0 ",(0,r.jsx)(n.code,{children:"isLogged"})," , donc ",(0,r.jsx)(n.code,{children:"ever()"})," ne serait jamais appel\xe9.\nPour \xe9viter ce type de comportement, le premier changement \xe0 un ",(0,r.jsx)(n.em,{children:"observable"})," d\xe9clenchera toujours un \xe9v\xe9nement,\nm\xeame s'il contient le m\xeame ",(0,r.jsx)(n.code,{children:". alue"})," ."]}),"\n",(0,r.jsxs)(n.p,{children:["Tu peux supprimer ce comportement si tu veux, en utilisant\n",(0,r.jsx)(n.code,{children:"isLogged.firstRebuild = false;"})]}),"\n",(0,r.jsx)(n.h3,{id:"conditions-\xe0-reconstruire",children:"Conditions \xe0 reconstruire"}),"\n",(0,r.jsx)(n.p,{children:"De plus, Get fournit un contr\xf4le \xe9tatique raffin\xe9. Vous pouvez conditionner un \xe9v\xe9nement (comme ajouter un objet \xe0 une liste), \xe0 une certaine condition."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"// First parameter: condition, must return true or false.\n// Second parameter: the new value to apply if the condition is true.\nlist.addIf(item < limit, item);\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Sans d\xe9corations, sans g\xe9n\xe9rateur de code, sans complications ","\ud83d\ude04"]}),"\n",(0,r.jsx)(n.p,{children:"Connaissez-vous l'application Compteur de Flutter? Votre classe de contr\xf4leur pourrait ressembler \xe0 ceci:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"class CountController extends GetxController {\n  final count = 0.obs;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Avec un simple :"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"controller.count.value++\n"})}),"\n",(0,r.jsx)(n.p,{children:"Vous pouvez mettre \xe0 jour la variable compteur dans votre interface utilisateur, quel que soit l'endroit o\xf9 elle est stock\xe9e."}),"\n",(0,r.jsx)(n.h3,{id:"o\xf9-les-obs-peuvent-\xeatre-utilis\xe9s",children:"O\xf9 les .obs peuvent \xeatre utilis\xe9s"}),"\n",(0,r.jsx)(n.p,{children:"Vous pouvez transformer n'importe quoi sur les obs. Voici deux fa\xe7ons de le faire:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Vous pouvez convertir vos valeurs de classe en obs"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:'class RxUser {\n  final name = "Camila".obs;\n  final age = 18.obs;\n}\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"ou vous pouvez convertir la classe enti\xe8re en \xe9tant observable"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:'class User {\n  User({String name, int age});\n  var name;\n  var age;\n}\n\n// when instantianting:\nfinal user = User(name: "Camila", age: 18).obs;\n'})}),"\n",(0,r.jsx)(n.h3,{id:"note-sur-les-listes",children:"Note sur les listes"}),"\n",(0,r.jsx)(n.p,{children:"Les listes sont compl\xe8tement observables comme le sont les objets qui s'y trouvent. De cette fa\xe7on, si vous ajoutez une valeur \xe0 une liste, elle reconstruira automatiquement les widgets qui l'utilisent."}),"\n",(0,r.jsx)(n.p,{children:"Vous n'avez pas non plus besoin d'utiliser \".value\" avec des listes, l'\xe9tonnant api dart nous a permis de supprimer cela.\nLes types primitifs malheureux tels que String et int ne peuvent pas \xeatre \xe9tendus, en utilisant . est obligatoire, mais ce ne sera pas un probl\xe8me si vous travaillez avec des jeux et des setters pour ceux-ci."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"// On the controller\nfinal String title = 'User Info:'.obs\nfinal list = List<User>().obs;\n\n// on the view\nText(controller.title.value), // String need to have .value in front of it\nListView.builder (\n  itemCount: controller.list.length // lists don't need it\n)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Lorsque vous rendez vos propres classes observables, il y a un autre moyen de les mettre \xe0 jour :"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"// on the model file\n// we are going to make the entire class observable instead of each attribute\nclass User() {\n  User({this.name = '', this.age = 0});\n  String name;\n  int age;\n}\n\n// on the controller file\nfinal user = User().obs;\n// when you need to update the user variable:\nuser.update( (user) { // this parameter is the class itself that you want to update\nuser.name = 'Jonny';\nuser.age = 18;\n});\n// an alternative way of update the user variable:\nuser(User(name: 'Jo\xe3o', age: 35));\n\n// on view:\nObx(()=> Text(\"Name ${user.value.name}: Age: ${user.value.age}\"))\n// you can also access the model values without the .value:\nuser().name; // notice that is the user variable, not the class (variable has lowercase u)\n"})}),"\n",(0,r.jsx)(n.p,{children:'Vous n\'avez pas \xe0 travailler avec des ensembles si vous ne le voulez pas. Vous pouvez utiliser l\'api "assigner "et" assign\xe9".\nL\'api "assigner" effacera votre liste et ajoutera un seul objet que vous voulez y commencer.\nL\'api "assignAll" effacera la liste existante et ajoutera tous les objets it\xe9rables que vous y injecterez.'}),"\n",(0,r.jsx)(n.h3,{id:"pourquoi-je-dois-utiliser-value",children:"Pourquoi je dois utiliser .value"}),"\n",(0,r.jsxs)(n.p,{children:["Nous pourrions supprimer l'obligation d'utiliser 'value' \xe0 ",(0,r.jsx)(n.code,{children:"String"})," et ",(0,r.jsx)(n.code,{children:"int"})," avec un simple g\xe9n\xe9rateur de d\xe9coration et de code, mais le but de cette biblioth\xe8que est pr\xe9cis\xe9ment d'\xe9viter les d\xe9pendances externes. Nous voulons offrir un environnement pr\xeat \xe0 la programmation, impliquant les \xe9l\xe9ments essentiels (gestion des routes, d\xe9pendances et \xe9tats), d'une mani\xe8re simple, l\xe9g\xe8re et performante, sans avoir besoin d'un paquet externe."]}),"\n",(0,r.jsx)(n.p,{children:"Vous pouvez litt\xe9ralement ajouter 3 lettres \xe0 votre pubspec (recevoir) et un deux-points et commencer la programmation. Toutes les solutions incluses par d\xe9faut, de la gestion des itin\xe9raires \xe0 la gestion des \xe9tats, visent \xe0 faciliter la t\xe2che, la productivit\xe9 et la performance."}),"\n",(0,r.jsx)(n.p,{children:"Le poids total de cette biblioth\xe8que est inf\xe9rieur \xe0 celui d'un gestionnaire d'\xe9tat unique, m\xeame si c'est une solution compl\xe8te, et c'est ce que vous devez comprendre."}),"\n",(0,r.jsxs)(n.p,{children:["Si vous \xeates ennuy\xe9 par ",(0,r.jsx)(n.code,{children:". alue"})," , et comme un g\xe9n\xe9rateur de code, MobX est une excellente alternative, et vous pouvez l'utiliser en conjonction avec Get. Pour ceux qui veulent ajouter une d\xe9pendance unique dans pubspec et commencer \xe0 programmer sans se soucier de l'incompatibilit\xe9 de la version d'un paquet avec un autre, ou si l'erreur d'une mise \xe0 jour d'\xe9tat vient du gestionnaire d'\xe9tat ou de la d\xe9pendance, ou encore, ne veulent pas s'inqui\xe9ter de la disponibilit\xe9 des contr\xf4leurs, si litt\xe9ralement \"juste la programmation\", obtenir est tout simplement parfait."]}),"\n",(0,r.jsx)(n.p,{children:"Si vous n'avez pas de probl\xe8me avec le g\xe9n\xe9rateur de code MobX, ou si vous n'avez aucun probl\xe8me avec le boilerplate BLoC, vous pouvez simplement utiliser Get pour les routes, et oublier qu'il a le gestionnaire d'\xe9tat. Obtenir SEM et RSM sont n\xe9s par n\xe9cessit\xe9, mon entreprise avait un projet avec plus de 90 contr\xf4leurs, et le g\xe9n\xe9rateur de code a simplement pris plus de 30 minutes pour terminer ses t\xe2ches apr\xe8s un Nettoyage Flutter sur une machine raisonnablement bonne. Si votre projet a 5, 10, 15 contr\xf4leurs, tout gestionnaire d'\xe9tat vous fournira bien. Si vous avez un projet ridiculement grand et que le g\xe9n\xe9rateur de code est un probl\xe8me pour vous, vous avez re\xe7u cette solution."}),"\n",(0,r.jsx)(n.p,{children:"\xc9videmment, si quelqu'un veut contribuer au projet et cr\xe9er un g\xe9n\xe9rateur de code, ou quelque chose de similaire, je vais lier dans ce readme comme une alternative, mon besoin n'est pas le besoin pour tous les d\xe9veloppeurs, mais pour l'instant je le dis, il ya de bonnes solutions qui font d\xe9j\xe0 cela, comme MobX."}),"\n",(0,r.jsx)(n.h3,{id:"obx",children:"Obx()"}),"\n",(0,r.jsxs)(n.p,{children:["Taper dans Get using Bindings n'est pas n\xe9cessaire. vous pouvez utiliser le widget Obx au lieu de GetX qui ne re\xe7oit que la fonction anonyme qui cr\xe9e un widget.\n\xc9videmment, si vous n'utilisez pas de type, vous devrez avoir une instance de votre contr\xf4leur pour utiliser les variables, ou utiliser ",(0,r.jsx)(n.code,{children:"Get. liez<Controller>()"})," .value ou Controller.to.value pour r\xe9cup\xe9rer la valeur."]}),"\n",(0,r.jsx)(n.h3,{id:"collaborateurs-trices",children:"Collaborateurs-trices"}),"\n",(0,r.jsx)(n.p,{children:"Les employ\xe9s vous aideront \xe0 d\xe9clencher des callbacks sp\xe9cifiques lorsqu'un \xe9v\xe9nement se produit."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:'/// Called every time `count1` changes.\never(count1, (_) => print("$_ has been changed"));\n\n/// Called only first time the variable $_ is changed\nonce(count1, (_) => print("$_ was changed once"));\n\n/// Anti DDos - Called every time the user stops typing for 1 second, for example.\ndebounce(count1, (_) => print("debouce$_"), time: Duration(seconds: 1));\n\n/// Ignore all changes within 1 second.\ninterval(count1, (_) => print("interval $_"), time: Duration(seconds: 1));\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Tous les travailleurs (sauf ",(0,r.jsx)(n.code,{children:"debounce"})," ) ont un ",(0,r.jsx)(n.code,{children:"condition"})," nomm\xe9 param\xe8tre, qui peut \xeatre un ",(0,r.jsx)(n.code,{children:"bool"})," ou un callback qui renvoie un ",(0,r.jsx)(n.code,{children:"bool"}),".\nCette ",(0,r.jsx)(n.code,{children:"condition"})," d\xe9finit quand la fonction ",(0,r.jsx)(n.code,{children:"callback"})," s'ex\xe9cute."]}),"\n",(0,r.jsxs)(n.p,{children:["Tous les travailleurs renvoient une instance ",(0,r.jsx)(n.code,{children:"Worker"}),", que vous pouvez utiliser pour annuler ( via ",(0,r.jsx)(n.code,{children:"dispose()"})," ) le travailleur."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"jamais"})})}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["est appel\xe9e \xe0 chaque fois que la variable ",(0,r.jsx)(n.em,{children:"Rx"})," \xe9met une nouvelle valeur."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"toujours"})})}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Comme ",(0,r.jsx)(n.code,{children:"ever"})," , mais il prend une ",(0,r.jsx)(n.code,{children:"List"})," de valeurs ",(0,r.jsx)(n.em,{children:"Rx"})," appel\xe9es chaque fois que sa variable est modifi\xe9e. Voil\xe0."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"une fois"})})}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"'once' n'est appel\xe9 que la premi\xe8re fois que la variable a \xe9t\xe9 modifi\xe9e."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"debounce"})})}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"'debounce' est tr\xe8s utile dans les fonctions de recherche, o\xf9 vous voulez seulement que l'API soit appel\xe9e lorsque l'utilisateur a fini de taper. Si l'utilisateur saisit \"Jonny\", vous aurez 5 recherches dans les APIs, par la lettre J, o, n, n et y. Avec Get cela ne se produit pas, parce que vous aurez un Worker \"debounce\" qui ne sera d\xe9clench\xe9 qu'\xe0 la fin de la frappe."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"intervalle"})})}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"'intervalle' est diff\xe9rent de la d\xe9bouche. d\xe9viation si l'utilisateur fait 1000 changements \xe0 une variable en 1 seconde, il n'enverra que le dernier apr\xe8s le minuteur stipul\xe9 (ce qui est par d\xe9faut 800 millisecondes). L'intervalle ignorera \xe0 la place toutes les actions de l'utilisateur pour la p\xe9riode pr\xe9vue. Si vous envoyez des \xe9v\xe9nements pendant 1 minute, 1000 par seconde, le debounce ne vous enverra que le dernier, lorsque l'utilisateur arr\xeate des \xe9v\xe9nements errants. L'intervalle livrera des \xe9v\xe9nements \xe0 chaque seconde, et s'il est r\xe9gl\xe9 sur 3 secondes, il livrera 20 \xe9v\xe9nements \xe0 la minute. Ceci est recommand\xe9 pour \xe9viter les abus, dans les fonctions o\xf9 l'utilisateur peut rapidement cliquer sur quelque chose et obtenir un avantage (imaginez que l'utilisateur peut gagner des pi\xe8ces en cliquant sur quelque chose, s'il a cliqu\xe9 300 fois dans la m\xeame minute, il aurait 300 pi\xe8ces, en utilisant l'intervalle, vous pouvez d\xe9finir un calendrier pour 3 secondes, et m\xeame apr\xe8s avoir cliqu\xe9 300 ou mille fois le maximum qu'il obtiendrait en 1 minute serait 20 pi\xe8ces, en cliquant 300 ou 1 million de fois). Le debounce est appropri\xe9 pour les anti-DDos, pour les fonctions comme la recherche o\xf9 chaque changement \xe0 onChange provoquerait une requ\xeate \xe0 votre api. Debounce attendra que l'utilisateur arr\xeate de taper le nom, pour faire la demande. Si elle \xe9tait utilis\xe9e dans le sc\xe9nario de pi\xe8ce mentionn\xe9 ci-dessus, l'utilisateur ne gagnera que 1 pi\xe8ce, parce qu'il n'est ex\xe9cut\xe9 que lorsque l'utilisateur \"pause\" pour la dur\xe9e \xe9tablie."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"REMARQUE : Les employ\xe9s doivent toujours \xeatre utilis\xe9s lors du d\xe9marrage d'un contr\xf4leur ou d'une classe, il devrait donc toujours \xeatre sur onInit (recommand\xe9), constructeur de classe, ou l'initState d'un StatefulWidget (cette pratique n'est pas recommand\xe9e dans la plupart des cas, mais elle ne devrait pas avoir d'effets secondaires)."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"gestionnaire-d\xe9tat-simple",children:"Gestionnaire d'\xe9tat simple"}),"\n",(0,r.jsx)(n.p,{children:"Get a un gestionnaire d'\xe9tat qui est extr\xeamement l\xe9ger et facile, qui n'utilise pas ChangeNotifier, r\xe9pondra au besoin en particulier pour les nouveaux utilisateurs de Flutter, et ne posera pas de probl\xe8mes pour les applications de grande taille."}),"\n",(0,r.jsx)(n.p,{children:"GetBuilder vise pr\xe9cis\xe9ment \xe0 contr\xf4ler plusieurs \xe9tats. Imaginez que vous ayez ajout\xe9 30 produits \xe0 un panier, vous cliquez sur supprimer un, en m\xeame temps que la liste est mise \xe0 jour, le prix est mis \xe0 jour et le badge dans le panier est mis \xe0 jour \xe0 un nombre plus petit. Ce type d'approche rend GetBuilder plus meurtrier, car il regroupe les \xe9tats et les modifie tous \xe0 la fois sans aucune \"logique de calcul\" pour cela. GetBuilder a \xe9t\xe9 cr\xe9\xe9 en gardant \xe0 l'esprit ce type de situation, car pour un changement \xe9ph\xe9m\xe8re d'\xe9tat, vous pouvez utiliser setState et vous n'aurez pas besoin d'un gestionnaire d'\xe9tat pour cela."}),"\n",(0,r.jsx)(n.p,{children:"De cette fa\xe7on, si vous voulez un contr\xf4leur individuel, vous pouvez assigner des identifiants pour cela, ou utiliser GetX. C'est \xe0 vous de le faire, en vous rappelant que plus vous avez de widgets \"individuels\", plus les performances de GetX se d\xe9marqueront, alors que les performances de GetBuilder devraient \xeatre sup\xe9rieures, quand il y a plusieurs changements d'\xe9tat."}),"\n",(0,r.jsx)(n.h3,{id:"avantages-1",children:"Avantages"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Mettre \xe0 jour uniquement les widgets requis."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"N'utilise pas changeNotifier, c'est le gestionnaire d'\xe9tat qui utilise moins de m\xe9moire (proche de 0mb)."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Oubliez StatefulWidget ! Avec Get vous n'en aurez jamais besoin. Avec les autres gestionnaires d'\xe9tat, vous devrez probablement utiliser un StatefulWidget pour obtenir l'instance de votre fournisseur, BLoC, MobX Controller, etc. Mais avez-vous jamais cess\xe9 de penser que votre barre d'app, votre \xe9chafaudage et la plupart des widgets qui sont dans votre classe sont apatrides ? Alors pourquoi enregistrer l'\xe9tat d'une classe enti\xe8re, si vous ne pouvez enregistrer que l'\xe9tat du Widget qui est \xe9tat? Obtenez des solutions \xe0 ce probl\xe8me aussi. Cr\xe9ez une classe sans \xe9tat, rendez tout sans \xe9tat. Si vous avez besoin de mettre \xe0 jour un seul composant, enveloppez-le avec GetBuilder, et son \xe9tat sera maintenu."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Organisez votre projet pour de vrais ! Les contr\xf4leurs ne doivent pas \xeatre dans votre interface utilisateur, placer votre TextEditController, ou tout contr\xf4leur que vous utilisez dans votre classe de contr\xf4leur."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Avez-vous besoin de d\xe9clencher un \xe9v\xe9nement pour mettre \xe0 jour un widget d\xe8s qu'il est rendu ? GetBuilder a la propri\xe9t\xe9 \"initState\", tout comme StatefulWidget, et vous pouvez appeler des \xe9v\xe9nements de votre contr\xf4leur, directement \xe0 partir de celui-ci, plus aucun \xe9v\xe9nement n'est plac\xe9 dans votre \xe9tat d'initialisation."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Avez-vous besoin de d\xe9clencher une action comme la fermeture des flux, des minuteurs et etc? GetBuilder dispose \xe9galement de la propri\xe9t\xe9 disposition, o\xf9 vous pouvez appeler des \xe9v\xe9nements d\xe8s que ce widget est d\xe9truit."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Utiliser les flux uniquement si n\xe9cessaire. Vous pouvez utiliser vos StreamControllers \xe0 l'int\xe9rieur de votre contr\xf4leur normalement, et utiliser StreamBuilder aussi normalement, mais n'oubliez pas, un flux consomme raisonnablement de la m\xe9moire, la programmation r\xe9active est belle, mais vous ne devriez pas abuser de cela. 30 flux ouverts simultan\xe9ment peuvent \xeatre pires que changeNotifier (et changeNotifier est tr\xe8s mauvais)."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Mettre \xe0 jour les widgets sans d\xe9penser de b\xe9lier pour cela. Obtenez les magasins uniquement l'ID de cr\xe9ateur de GetBuilder, et les mises \xe0 jour que GetBuilder si n\xe9cessaire. La consommation de m\xe9moire du get ID dans la m\xe9moire est tr\xe8s faible, m\xeame pour des milliers de GetBuilders. Lorsque vous cr\xe9ez un nouveau GetBuilder, vous partagez en fait l'\xe9tat de GetBuilder qui a un ID de cr\xe9ateur. Un nouvel \xe9tat n'est pas cr\xe9\xe9 pour chaque GetBuilder, ce qui sauve un LOT DE RAM pour les applications de grande taille. Fondamentalement, votre demande sera enti\xe8rement sans \xe9tat et les quelques Widgets qui seront Stateful (au sein de GetBuilder) auront un seul \xe9tat, et donc la mise \xe0 jour d'un d'entre eux les mettra \xe0 jour tous. L'\xc9tat n'en est qu'un seul."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Obtenir est omniscient et dans la plupart des cas, il sait exactement le temps de retirer un contr\xf4leur de la m\xe9moire. Vous ne devriez pas vous inqui\xe9ter de savoir quand vous d\xe9barrasser d'un contr\xf4leur, faites savoir le meilleur moment pour le faire."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"// Create controller class and extends GetxController\nclass Controller extends GetxController {\n  int counter = 0;\n  void increment() {\n    counter++;\n    update(); // use update() to update counter variable on UI when increment be called\n  }\n}\n// On your Stateless/Stateful class, use GetBuilder to update Text when increment be called\nGetBuilder<Controller>(\n  init: Controller(), // INIT IT ONLY THE FIRST TIME\n  builder: (_) => Text(\n    '${_.counter}',\n  ),\n)\n//Initialize your controller only the first time. The second time you are using ReBuilder for the same controller, do not use it again. Your controller will be automatically removed from memory as soon as the widget that marked it as 'init' is deployed. You don't have to worry about that, Get will do it automatically, just make sure you don't start the same controller twice.\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Termin\xe9 !"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Vous avez d\xe9j\xe0 appris comment g\xe9rer les \xe9tats avec Get."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Note : Vous pouvez vouloir une organisation plus grande, et ne pas utiliser la propri\xe9t\xe9 init. Pour cela, vous pouvez cr\xe9er une classe et \xe9tendre la classe Binding et mentionner les contr\xf4leurs qui seront cr\xe9\xe9s dans cette route. Les contr\xf4leurs ne seront pas cr\xe9\xe9s \xe0 ce moment-l\xe0, au contraire, ce n'est qu'une d\xe9claration, pour que la premi\xe8re fois que vous utilisez un contr\xf4leur, Get sache o\xf9 regarder. Obtenez restera pazyLoad et continuera \xe0 \xe9liminer les contr\xf4leurs quand ils ne sont plus n\xe9cessaires. Voyez l'exemple pub.dev pour voir comment \xe7a fonctionne."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Si vous naviguez sur de nombreuses routes et que vous avez besoin de donn\xe9es qui \xe9taient dans votre contr\xf4leur pr\xe9c\xe9demment utilis\xe9, il vous suffit d'utiliser GetBuilder \xe0 nouveau (sans init):"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"class OtherClass extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Center(\n        child: GetBuilder<Controller>(\n          builder: (s) => Text('${s.counter}'),\n        ),\n      ),\n    );\n  }\n\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Si vous avez besoin d'utiliser votre contr\xf4leur \xe0 d'autres endroits, et en dehors de GetBuilder, il vous suffit de cr\xe9er une entr\xe9e dans votre contr\xf4leur et de l'avoir facilement. (ou utilisez ",(0,r.jsx)(n.code,{children:"Get.find<Controller>()"})," )"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"class Controller extends GetxController {\n\n  /// You do not need that. I recommend using it just for ease of syntax.\n  /// with static method: Controller.to.increment();\n  /// with no static method: Get.find<Controller>().increment();\n  /// There is no difference in performance, nor any side effect of using either syntax. Only one does not need the type, and the other the IDE will autocomplete it.\n  static Controller get to => Get.find(); // add this line\n\n  int counter = 0;\n  void increment() {\n    counter++;\n    update();\n  }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Et puis vous pouvez acc\xe9der directement \xe0 votre contr\xf4leur, de cette fa\xe7on :"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:'FloatingActionButton(\n  onPressed: () {\n    Controller.to.increment(),\n  } // This is incredibly simple!\n  child: Text("${Controller.to.counter}"),\n),\n'})}),"\n",(0,r.jsx)(n.p,{children:"Lorsque vous appuyez sur FloatingActionButton, tous les widgets qui \xe9coutent la variable 'compteur' seront mis \xe0 jour automatiquement."}),"\n",(0,r.jsx)(n.h3,{id:"comment-g\xe9rer-les-contr\xf4leurs",children:"Comment g\xe9rer les contr\xf4leurs"}),"\n",(0,r.jsx)(n.p,{children:"Disons que nous avons ceci:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"Classe a => Classe B (a le contr\xf4leur X) => Classe C (a le contr\xf4leur X)"})}),"\n",(0,r.jsx)(n.p,{children:"Dans la classe A, le contr\xf4leur n'est pas encore en m\xe9moire, parce que vous ne l'avez pas encore utilis\xe9 (Get is lazyLoad). Dans la classe B, vous avez utilis\xe9 le contr\xf4leur, et il est entr\xe9 en m\xe9moire. Dans la classe C, vous avez utilis\xe9 le m\xeame contr\xf4leur que dans la classe B, Get partagera l'\xe9tat du contr\xf4leur B avec le contr\xf4leur C, et le m\xeame contr\xf4leur est toujours en m\xe9moire. Si vous fermez l'\xe9cran C et l'\xe9cran B, Get prendra automatiquement le contr\xf4leur X en m\xe9moire et lib\xe9rera des ressources. parce que la classe a n'utilise pas le contr\xf4leur. Si vous repassez vers B, le contr\xf4leur X entrera \xe0 nouveau dans la m\xe9moire, si au lieu d'aller \xe0 la classe C, vous revenez \xe0 nouveau \xe0 la classe A, Get prendra le contr\xf4leur en m\xe9moire de la m\xeame mani\xe8re. Si la classe C n'utilise pas le contr\xf4leur, et que vous avez pris la classe B en m\xe9moire, aucune classe n'utiliserait le contr\xf4leur X et elle serait \xe9galement d\xe9pos\xe9e. La seule exception qui peut g\xe2cher avec Get, est si vous retirez B de la route de mani\xe8re inattendue et essayez d'utiliser le contr\xf4leur en C. Dans ce cas, l'ID du cr\xe9ateur du contr\xf4leur qui \xe9tait en B a \xe9t\xe9 supprim\xe9, et Get a \xe9t\xe9 programm\xe9 pour le retirer de la m\xe9moire chaque contr\xf4leur qui n'a pas d'ID de cr\xe9ateur. Si vous avez l'intention de le faire, ajoutez le flag \"autoRemove: false\" \xe0 GetBuilder de la classe B et utilisez adoptID = true; dans GetBuilder de la classe C."}),"\n",(0,r.jsx)(n.h3,{id:"vous-naurez-plus-besoin-de-statefulwidgets",children:"Vous n'aurez plus besoin de StatefulWidgets"}),"\n",(0,r.jsx)(n.p,{children:"Utiliser StatefulWidgets signifie stocker inutilement l'\xe9tat des \xe9crans entiers, m\xeame si vous avez besoin de reconstruire un widget, vous l'int\xe9grerez dans un Consumer/Observer/BlocProvider/GetBuilder/GetX/Obx, qui sera un autre StatefulWidget.\nLa classe StatefulWidget est une classe plus grande que StatelessWidget, qui allouera plus de RAM, et cela peut ne pas faire une diff\xe9rence significative entre une ou deux classes, mais cela sera tr\xe8s certainement le cas quand vous en aurez 100 !\n\xc0 moins que vous n'ayez besoin d'utiliser un mixin, comme TickerProviderStateMixin, il sera totalement inutile d'utiliser un StatefulWidget avec Get."}),"\n",(0,r.jsx)(n.p,{children:"Vous pouvez appeler toutes les m\xe9thodes d'un StatefulWidget directement depuis un GetBuilder.\nSi vous devez appeler la m\xe9thode initState() ou dispose() par exemple, vous pouvez les appeler directement ;"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"GetBuilder<Controller>(\n  initState: (_) => Controller.to.fetchApi(),\n  dispose: (_) => Controller.to.closeStreams(),\n  builder: (s) => Text('${s.username}'),\n),\n"})}),"\n",(0,r.jsx)(n.p,{children:"Une meilleure approche est d'utiliser la m\xe9thode onInit() et onClose() directement depuis votre contr\xf4leur."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"@override\nvoid onInit() {\n  fetchApi();\n  super.onInit();\n}\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"REMARQUE : Si vous voulez d\xe9marrer une m\xe9thode au moment o\xf9 le contr\xf4leur est appel\xe9 pour la premi\xe8re fois, Vous n'avez PAS BESOIN d'utiliser des constructeurs pour cela, en fait, en utilisant un paquet ax\xe9 sur les performances comme Get, cette bordure sur les mauvaises pratiques, parce qu'il s'\xe9carte de la logique dans laquelle les contr\xf4leurs sont cr\xe9\xe9s ou allou\xe9s (si vous cr\xe9ez une instance de ce contr\xf4leur, le constructeur sera appel\xe9 imm\xe9diatement, vous allez remplir un contr\xf4leur avant m\xeame qu'il soit utilis\xe9, vous allouez de la m\xe9moire sans qu'elle soit utilis\xe9e, ce qui nuit aux principes de cette biblioth\xe8que). Les m\xe9thodes onInit() ; et onClose(); ont \xe9t\xe9 cr\xe9\xe9s pour cela, ils seront appel\xe9s lorsque le contr\xf4leur sera cr\xe9\xe9, ou utilis\xe9 pour la premi\xe8re fois, selon que vous utilisez Get. azyPut ou non. Si vous voulez, par exemple, faire un appel \xe0 votre API pour remplir des donn\xe9es, vous pouvez oublier la m\xe9thode obsol\xe8te de initState/disposition, d\xe9marrez juste votre appel \xe0 l'api dans onInit, et si vous avez besoin d'ex\xe9cuter une commande comme la fermeture des flux, utilisez la fonction onClose() pour cela."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"pourquoi-il-existe",children:"Pourquoi il existe"}),"\n",(0,r.jsx)(n.p,{children:"Le but de ce paquet est pr\xe9cis\xe9ment de vous donner une solution compl\xe8te pour la navigation des routes, la gestion des d\xe9pendances et des \xe9tats, en utilisant les d\xe9pendances les moins possibles, avec un degr\xe9 \xe9lev\xe9 de d\xe9couplage. Faites appel \xe0 toutes les API de lutte de haut et de bas niveau pour vous assurer que vous travaillez avec le moins de couplage possible. Nous centralisons tout en un seul paquet, pour vous assurer que vous n'avez pas de couplage dans votre projet. De cette fa\xe7on, vous ne pouvez mettre que des widgets dans votre vue, et laisser la partie de votre \xe9quipe qui fonctionne avec la logique d'entreprise librement, pour travailler avec la logique commerciale sans d\xe9pendre de tout \xe9l\xe9ment de la vue. Cela fournit un environnement de travail beaucoup plus propre, de sorte qu'une partie de votre \xe9quipe ne fonctionne qu'avec des widgets, sans se soucier d'envoyer des donn\xe9es \xe0 votre contr\xf4leur, et une partie de votre \xe9quipe ne travaille qu'avec la logique commerciale dans son ensemble, sans d\xe9pendre d'aucun \xe9l\xe9ment de la vue."}),"\n",(0,r.jsx)(n.p,{children:"Donc pour simplifier ceci :\nVous n'avez pas besoin d'appeler des m\xe9thodes dans initState et de les envoyer par param\xe8tre \xe0 votre contr\xf4leur, ni utiliser le constructeur de votre contr\xf4leur pour cela, vous avez la m\xe9thode onInit() qui est appel\xe9e au bon moment pour d\xe9marrer vos services.\nVous n'avez pas besoin d'appeler l'appareil, vous avez la m\xe9thode onClose() qui sera appel\xe9e au moment exact o\xf9 votre contr\xf4leur n'est plus n\xe9cessaire et sera retir\xe9 de la m\xe9moire. De cette fa\xe7on, laisser les vues pour les widgets seulement, s'abstenir de toute logique commerciale de cela."}),"\n",(0,r.jsx)(n.p,{children:"N'appelez pas une m\xe9thode d'\xe9limination dans GetxController, il ne fera rien, n'oubliez pas que le contr\xf4leur n'est pas un Widget, vous ne devriez pas le \xab disposer \xbb, et il sera automatiquement et intelligemment retir\xe9 de la m\xe9moire par Get. Si vous avez utilis\xe9 un flux sur lui et que vous voulez le fermer, ins\xe9rez-le dans la m\xe9thode ferm\xe9e. Exemple:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"class Controller extends GetxController {\n  StreamController<User> user = StreamController<User>();\n  StreamController<String> name = StreamController<String>();\n\n  /// close stream = onClose method, not dispose.\n  @override\n  void onClose() {\n    user.close();\n    name.close();\n    super.onClose();\n  }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Cycle de vie du contr\xf4leur :"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"onInit() o\xf9 il est cr\xe9\xe9."}),"\n",(0,r.jsx)(n.li,{children:"onClose() o\xf9 il est ferm\xe9 pour effectuer des modifications dans la pr\xe9paration de la m\xe9thode de suppression"}),"\n",(0,r.jsx)(n.li,{children:"supprim\xe9: vous n'avez pas acc\xe8s \xe0 cette API car elle supprime litt\xe9ralement le contr\xf4leur de la m\xe9moire. Elle est litt\xe9ralement supprim\xe9e, sans laisser de trace."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"autres-fa\xe7ons-de-lutiliser",children:"Autres fa\xe7ons de l'utiliser"}),"\n",(0,r.jsx)(n.p,{children:"Vous pouvez utiliser une instance de contr\xf4leur directement sur la valeur de GetBuilder:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"GetBuilder<Controller>(\n  init: Controller(),\n  builder: (value) => Text(\n    '${value.counter}', //here\n  ),\n),\n"})}),"\n",(0,r.jsx)(n.p,{children:"Vous pouvez \xe9galement avoir besoin d'une instance de votre contr\xf4leur en dehors de votre GetBuilder, et vous pouvez utiliser ces approches pour atteindre ceci:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"class Controller extends GetxController {\n  static Controller get to => Get.find();\n[...]\n}\n// on you view:\nGetBuilder<Controller>(  \n  init: Controller(), // use it only first time on each controller\n  builder: (_) => Text(\n    '${Controller.to.counter}', //here\n  )\n),\n"})}),"\n",(0,r.jsx)(n.p,{children:"ou"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"class Controller extends GetxController {\n // static Controller get to => Get.find(); // with no static get\n[...]\n}\n// on stateful/stateless class\nGetBuilder<Controller>(  \n  init: Controller(), // use it only first time on each controller\n  builder: (_) => Text(\n    '${Get.find<Controller>().counter}', //here\n  ),\n),\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:'Pour cela, vous pouvez utiliser des approches "non-canoniques". Si vous utilisez un autre gestionnaire de d\xe9pendances, comme get_it, modulaire, etc., et que vous voulez simplement fournir l\'instance du contr\xf4leur, vous pouvez faire ceci :'}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"Controller controller = Controller();\n[...]\nGetBuilder<Controller>(\n  init: controller, //here\n  builder: (_) => Text(\n    '${controller.counter}', // here\n  ),\n),\n\n"})}),"\n",(0,r.jsx)(n.h3,{id:"ids-uniques",children:"IDs uniques"}),"\n",(0,r.jsx)(n.p,{children:"Si vous voulez affiner le contr\xf4le de mise \xe0 jour d'un widget avec GetBuilder, vous pouvez leur assigner des ID uniques :"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"GetBuilder<Controller>(\n  id: 'text'\n  init: Controller(), // use it only first time on each controller\n  builder: (_) => Text(\n    '${Get.find<Controller>().counter}', //here\n  ),\n),\n"})}),"\n",(0,r.jsx)(n.p,{children:"Et mettez \xe0 jour cette forme :"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"update(['text']);\n"})}),"\n",(0,r.jsx)(n.p,{children:"Vous pouvez \xe9galement imposer des conditions pour la mise \xe0 jour :"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"update(['text'], counter < 10);\n"})}),"\n",(0,r.jsx)(n.p,{children:"GetX le fait automatiquement et ne reconstruit que le widget qui utilise la variable exacte qui a \xe9t\xe9 modifi\xe9e, si vous changez une variable par la m\xeame valeur que la pr\xe9c\xe9dente, ce qui n'implique pas un changement d'\xe9tat , GetX ne reconstruira pas le widget pour \xe9conomiser de la m\xe9moire et les cycles CPU (3 est affich\xe9 \xe0 l'\xe9cran). et vous changez \xe0 nouveau la variable \xe0 3. Dans la plupart des gestionnaires d'\xe9tat, cela provoquera une nouvelle reconstruction, mais avec GetX, le widget ne sera reconstruit que si en fait son \xe9tat a chang\xe9)."}),"\n",(0,r.jsx)(n.h2,{id:"m\xe9langer-les-deux-gestionnaires-d\xe9tat",children:"M\xe9langer les deux gestionnaires d'\xe9tat"}),"\n",(0,r.jsx)(n.p,{children:"Certaines personnes ont ouvert une demande de fonctionnalit\xe9, car elles ne voulaient utiliser qu'un seul type de variable r\xe9active, et les autres m\xe9caniques, et avaient besoin d'ins\xe9rer un Obx dans un GetBuilder pour cela. MixinBuilder a \xe9t\xe9 cr\xe9\xe9 pour y penser. Il permet \xe0 la fois des changements r\xe9actifs en modifiant des variables \".obs\" et des mises \xe0 jour m\xe9caniques via update(). Cependant, parmi les 4 widgets il est celui qui consomme le plus de ressources, car en plus d'avoir un abonnement pour recevoir des \xe9v\xe9nements de changement de la part de ses enfants, il souscrit \xe0 la m\xe9thode de mise \xe0 jour de son contr\xf4leur."}),"\n",(0,r.jsx)(n.p,{children:"L'extension de GetxController est importante, car ils ont des cycles de vie, et peuvent \"d\xe9marrer\" et \"fin\" les \xe9v\xe9nements dans leurs m\xe9thodes onInit() et onClose() . Vous pouvez utiliser n'importe quelle classe pour cela, mais je vous recommande fortement d'utiliser la classe GetxController pour placer vos variables, qu'ils soient observables ou non."}),"\n",(0,r.jsx)(n.h2,{id:"mixin",children:"Mixin"}),"\n",(0,r.jsxs)(n.p,{children:["Une autre fa\xe7on de g\xe9rer votre \xe9tat ",(0,r.jsx)(n.code,{children:"UI"})," est d'utiliser le ",(0,r.jsx)(n.code,{children:"StateMixin<T>"}),".\nPour l'impl\xe9menter, utilisez le ",(0,r.jsx)(n.code,{children:"with"})," pour ajouter le ",(0,r.jsx)(n.code,{children:"StateMixin<T>"}),"\n\xe0 votre contr\xf4leur qui permet un mod\xe8le T."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"class Controller extends GetController with StateMixin<User>{}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["La m\xe9thode ",(0,r.jsx)(n.code,{children:"change()"})," change l'\xe9tat quand nous le voulons.\nIl suffit de transmettre les donn\xe9es et le statut de cette fa\xe7on :"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"change(data, status: RxStatus.success());\n"})}),"\n",(0,r.jsx)(n.p,{children:"RxStatus autorise ces statuts :"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"RxStatus.loading();\nRxStatus.success();\nRxStatus.empty();\nRxStatus.error('message');\n"})}),"\n",(0,r.jsx)(n.p,{children:"Pour le repr\xe9senter dans l'interface utilisateur, utilisez :"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"class OtherClass extends GetView<Controller> {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n\n      body: controller.obx(\n        (state)=>Text(state.name),\n        \n        // here you can put your custom loading indicator, but\n        // by default would be Center(child:CircularProgressIndicator())\n        onLoading: CustomLoadingIndicator(),\n        onEmpty: Text('No data found'),\n\n        // here also you can set your own error widget, but by\n        // default will be an Center(child:Text(error))\n        onError: (error)=>Text(error),\n      ),\n    );\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"getbuilder-vs-getx-vs-obx-vs-mixinbuilder",children:"GetBuilder vs GetX vs Obx vs MixinBuilder"}),"\n",(0,r.jsx)(n.p,{children:"En une d\xe9cennie de travail avec la programmation, j'ai pu apprendre des le\xe7ons pr\xe9cieuses."}),"\n",(0,r.jsx)(n.p,{children:"Mon premier contact avec la programmation r\xe9active a \xe9t\xe9 si \"wow, c'est incroyable\" et en fait la programmation r\xe9active est incroyable.\nCependant, il ne convient pas \xe0 toutes les situations. Souvent, tout ce dont vous avez besoin est de changer l'\xe9tat de 2 ou 3 widgets en m\xeame temps, ou un changement d'\xe9tat \xe9ph\xe9m\xe8re, auquel cas la programmation r\xe9active n'est pas mauvaise, mais elle n'est pas appropri\xe9e."}),"\n",(0,r.jsx)(n.p,{children:"La programmation r\xe9active a une consommation de RAM plus \xe9lev\xe9e qui peut \xeatre compens\xe9e par le flux de travail individuel, qui s'assurera qu'un seul widget est reconstruit et si n\xe9cessaire, mais en cr\xe9ant une liste avec 80 objets, chacun avec plusieurs flux n'est pas une bonne id\xe9e. Ouvrez le dart inspecter et v\xe9rifiez combien un StreamBuilder consomme, et vous comprendrez ce que j'essaie de vous dire."}),"\n",(0,r.jsx)(n.p,{children:"C'est dans cet esprit que j'ai cr\xe9\xe9 le simple gestionnaire d'\xc9tat. C'est simple, et c'est exactement ce que vous devriez exiger: mettre \xe0 jour l'\xe9tat en blocs d'une mani\xe8re simple, et de la mani\xe8re la plus \xe9conomique."}),"\n",(0,r.jsx)(n.p,{children:"GetBuilder est tr\xe8s \xe9conomique en RAM, et il y a \xe0 peine une approche plus \xe9conomique que lui (au moins je ne peux pas en imaginer une, si elle existe, s'il vous pla\xeet faites-le nous savoir)."}),"\n",(0,r.jsx)(n.p,{children:"Cependant, GetBuilder est toujours un gestionnaire d'\xe9tat m\xe9canique, vous devez appeler update() comme vous devriez appeler la fonction Provider's notifyListeners()."}),"\n",(0,r.jsx)(n.p,{children:"Il y a d'autres situations o\xf9 la programmation r\xe9active est vraiment int\xe9ressante, et ne pas travailler avec elle, c'est la m\xeame chose que de r\xe9inventer la roue. Avec cela \xe0 l'esprit, GetX a \xe9t\xe9 cr\xe9\xe9 pour fournir tout ce qui est le plus moderne et le plus avanc\xe9 dans un gestionnaire d'\xe9tat. Il ne met \xe0 jour que ce qui est n\xe9cessaire et si n\xe9cessaire, si vous avez une erreur et envoyez 300 changements d'\xe9tat en m\xeame temps, GetX filtrera et mettra \xe0 jour l'\xe9cran uniquement si l'\xe9tat change r\xe9ellement."}),"\n",(0,r.jsx)(n.p,{children:"GetX est encore plus \xe9conomique que tout autre gestionnaire d'\xe9tat r\xe9actif, mais il consomme un peu plus de RAM que GetBuilder. Penser \xe0 cela et viser \xe0 maximiser la consommation de ressources qu'Obx a \xe9t\xe9 cr\xe9\xe9. Contrairement \xe0 GetX et GetBuilder, vous ne pourrez pas initialiser un contr\xf4leur dans un Obx, c'est juste un Widget avec un StreamSubscription qui re\xe7oit des \xe9v\xe9nements de changement de vos enfants, c'est tout. Il est plus \xe9conomique que GetX, mais perd pour GetBuilder, ce qui \xe9tait \xe0 pr\xe9voir, car il est r\xe9actif, et GetBuilder a l'approche la plus simpliste qui existe, de stocker le hashcode d'un widget et son StateSetter. Avec Obx, vous n'avez pas besoin d'\xe9crire votre type de contr\xf4leur, et vous pouvez entendre le changement de plusieurs contr\xf4leurs diff\xe9rents, mais il doit \xeatre initialis\xe9 avant, soit en utilisant l'approche d'exemple au d\xe9but de ce readme, soit en utilisant la classe Bindings."})]})}function d(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>a,a:()=>l});var r=s(7294);const t={},i=r.createContext(t);function l(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);