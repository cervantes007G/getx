"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[418],{6825:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var a=t(5893),r=t(1151);const s={sidebar_position:2},i="Itin\xe9raire",o={id:"pillars/route-management",title:"Itin\xe9raire",description:"C'est l'explication compl\xe8te de tout ce qu'il y a \xe0 Getx quand il s'agit de la gestion des routes.",source:"@site/i18n/fr/docusaurus-plugin-content-docs/current/pillars/route-management.md",sourceDirName:"pillars",slug:"/pillars/route-management",permalink:"/getx/fr/docs/pillars/route-management",draft:!1,unlisted:!1,editUrl:"https://github.com/jonataslaw/getx/docs/pillars/route-management.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"\xc9tat",permalink:"/getx/fr/docs/pillars/state-management"},next:{title:"D\xe9pendance",permalink:"/getx/fr/docs/pillars/dependency-management"}},l={},d=[{value:"Comment utiliser",id:"comment-utiliser",level:2},{value:"Navigation sans routes nomm\xe9es",id:"navigation-sans-routes-nomm\xe9es",level:2},{value:"Navigation avec les routes nomm\xe9es",id:"navigation-avec-les-routes-nomm\xe9es",level:2},{value:"Envoyer des donn\xe9es aux Routes nomm\xe9es",id:"envoyer-des-donn\xe9es-aux-routes-nomm\xe9es",level:3},{value:"Liens d&#39;URL dynamiques",id:"liens-durl-dynamiques",level:3},{value:"Middleware",id:"middleware",level:3},{value:"Navigation sans contexte",id:"navigation-sans-contexte",level:2},{value:"SnackBars",id:"snackbars",level:3},{value:"Dialogues",id:"dialogues",level:3},{value:"Feuilles en bas",id:"feuilles-en-bas",level:3},{value:"Navigation imbriqu\xe9e",id:"navigation-imbriqu\xe9e",level:2}];function u(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"itin\xe9raire",children:"Itin\xe9raire"}),"\n",(0,a.jsx)(n.p,{children:"C'est l'explication compl\xe8te de tout ce qu'il y a \xe0 Getx quand il s'agit de la gestion des routes."}),"\n",(0,a.jsx)(n.h2,{id:"comment-utiliser",children:"Comment utiliser"}),"\n",(0,a.jsx)(n.p,{children:"Ajouter ceci \xe0 votre fichier pubspec.yaml :"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"dependencies:\n  get:\n"})}),"\n",(0,a.jsx)(n.p,{children:'Si vous utilisez des routes/snackbars/dialogs/bottomsheets sans contexte, ou utilisez les API de haut niveau, vous devez simplement ajouter "Get" avant votre MaterialApp, la transformer en GetMaterialApp et profiter !'}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"GetMaterialApp( // Before: MaterialApp(\n  home: MyHome(),\n)\n"})}),"\n",(0,a.jsx)(n.h2,{id:"navigation-sans-routes-nomm\xe9es",children:"Navigation sans routes nomm\xe9es"}),"\n",(0,a.jsx)(n.p,{children:"Pour naviguer vers un nouvel \xe9cran :"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"Get.to(NextScreen());\n"})}),"\n",(0,a.jsx)(n.p,{children:"Pour fermer les barres de collation, les dialogues, les feuilles du bas ou tout ce que vous fermeriez normalement avec Navigator.pop(contexte);"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"Get.back();\n"})}),"\n",(0,a.jsx)(n.p,{children:"Pour passer \xe0 l'\xe9cran suivant et aucune option pour revenir \xe0 l'\xe9cran pr\xe9c\xe9dent (pour utiliser dans SplashScreens, les \xe9crans de connexion et etc.)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"Get.off(NextScreen());\n"})}),"\n",(0,a.jsx)(n.p,{children:"Pour aller \xe0 l'\xe9cran suivant et annuler tous les itin\xe9raires pr\xe9c\xe9dents (utiles dans les paniers, les sondages et les tests)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"Get.offAll(NextScreen());\n"})}),"\n",(0,a.jsx)(n.p,{children:"Pour naviguer vers l'itin\xe9raire suivant, et recevoir ou mettre \xe0 jour les donn\xe9es d\xe8s que vous revenez depuis:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"var data = await Get.to(Payment());\n"})}),"\n",(0,a.jsx)(n.p,{children:"sur un autre \xe9cran, envoyer des donn\xe9es pour la route pr\xe9c\xe9dente :"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"Get.back(result: 'success');\n"})}),"\n",(0,a.jsx)(n.p,{children:"Et utilisez:"}),"\n",(0,a.jsx)(n.p,{children:"ex:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"if(data == 'success') madeAnything();\n"})}),"\n",(0,a.jsx)(n.p,{children:"Vous ne voulez pas apprendre notre syntaxe ?\nIl suffit de changer le navigateur (majuscule) en navigateur (minuscule), et vous aurez toutes les fonctions de la navigation standard, sans avoir \xe0 utiliser le contexte\nExemple:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"\n// Default Flutter navigator\nNavigator.of(context).push(\n  context,\n  MaterialPageRoute(\n    builder: (BuildContext context) {\n      return HomePage();\n    },\n  ),\n);\n\n// Get using Flutter syntax without needing context\nnavigator.push(\n  MaterialPageRoute(\n    builder: (_) {\n      return HomePage();\n    },\n  ),\n);\n\n// Get syntax (It is much better, but you have the right to disagree)\nGet.to(HomePage());\n\n\n"})}),"\n",(0,a.jsx)(n.h2,{id:"navigation-avec-les-routes-nomm\xe9es",children:"Navigation avec les routes nomm\xe9es"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Si vous pr\xe9f\xe9rez naviguer par namedRoutes, Get also supports ceci."}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Pour naviguer vers le prochain \xe9cran"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:'Get.toNamed("/NextScreen");\n'})}),"\n",(0,a.jsx)(n.p,{children:"Pour naviguer et supprimer l'\xe9cran pr\xe9c\xe9dent de l'arborescence."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:'Get.offNamed("/NextScreen");\n'})}),"\n",(0,a.jsx)(n.p,{children:"Pour naviguer et supprimer tous les \xe9crans pr\xe9c\xe9dents de l'arborescence."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:'Get.offAllNamed("/NextScreen");\n'})}),"\n",(0,a.jsx)(n.p,{children:"Pour d\xe9finir des routes, utilisez GetMaterialApp :"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"void main() {\n  runApp(\n    GetMaterialApp(\n      initialRoute: '/',\n      getPages: [\n        GetPage(name: '/', page: () => MyHomePage()),\n        GetPage(name: '/second', page: () => Second()),\n        GetPage(\n          name: '/third',\n          page: () => Third(),\n          transition: Transition.zoom  \n        ),\n      ],\n    )\n  );\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"Pour g\xe9rer la navigation vers des routes non d\xe9finies (404 erreur), vous pouvez d\xe9finir une page unknownRoute dans GetMaterialApp."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"void main() {\n  runApp(\n    GetMaterialApp(\n      unknownRoute: GetPage(name: '/notfound', page: () => UnknownRoutePage()),\n      initialRoute: '/',\n      getPages: [\n        GetPage(name: '/', page: () => MyHomePage()),\n        GetPage(name: '/second', page: () => Second()),\n      ],\n    )\n  );\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"envoyer-des-donn\xe9es-aux-routes-nomm\xe9es",children:"Envoyer des donn\xe9es aux Routes nomm\xe9es"}),"\n",(0,a.jsx)(n.p,{children:"Envoyez simplement ce que vous voulez pour des arguments. Obtenir n'importe quoi accepte ici, qu'il s'agisse d'une String, d'une Map, d'une Liste, ou m\xeame d'une instance de classe."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"Get.toNamed(\"/NextScreen\", arguments: 'Get is the best');\n"})}),"\n",(0,a.jsx)(n.p,{children:"sur votre classe ou votre contr\xf4leur :"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"print(Get.arguments);\n//print out: Get is the best\n"})}),"\n",(0,a.jsx)(n.h3,{id:"liens-durl-dynamiques",children:"Liens d'URL dynamiques"}),"\n",(0,a.jsx)(n.p,{children:"Offrez des urls dynamiques avanc\xe9s comme sur le Web. Les d\xe9veloppeurs Web ont probablement d\xe9j\xe0 souhait\xe9 cette fonctionnalit\xe9 sur Flutter, et tr\xe8s probablement ont vu un paquet promettre cette fonctionnalit\xe9 et fournir une syntaxe totalement diff\xe9rente de celle qu'une URL aurait sur le web, mais Get aussi r\xe9sout cela."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:'Get.offAllNamed("/NextScreen?device=phone&id=354&name=Enzo");\n'})}),"\n",(0,a.jsx)(n.p,{children:"sur votre contr\xf4leur/bloc/\xe9tat/classe sans \xe9tat:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"print(Get.parameters['id']);\n// out: 354\nprint(Get.parameters['name']);\n// out: Enzo\n"})}),"\n",(0,a.jsx)(n.p,{children:"Vous pouvez \xe9galement recevoir des NamedParameters avec Get easily :"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"void main() {\n  runApp(\n    GetMaterialApp(\n      initialRoute: '/',\n      getPages: [\n      GetPage(\n        name: '/',\n        page: () => MyHomePage(),\n      ),\n      GetPage(\n        name: '/profile/',\n        page: () => MyProfile(),\n      ),\n       //You can define a different page for routes with arguments, and another without arguments, but for that you must use the slash '/' on the route that will not receive arguments as above.\n       GetPage(\n        name: '/profile/:user',\n        page: () => UserProfile(),\n      ),\n      GetPage(\n        name: '/third',\n        page: () => Third(),\n        transition: Transition.cupertino  \n      ),\n     ],\n    )\n  );\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"Envoyer des donn\xe9es sur le nom de l'itin\xe9raire"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:'Get.toNamed("/profile/34954");\n'})}),"\n",(0,a.jsx)(n.p,{children:"Sur le deuxi\xe8me \xe9cran prendre les donn\xe9es par param\xe8tre"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"print(Get.parameters['user']);\n// out: 34954\n"})}),"\n",(0,a.jsx)(n.p,{children:"ou envoyer plusieurs param\xe8tres comme ceci"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:'Get.toNamed("/profile/34954?flag=true&country=italy");\n'})}),"\n",(0,a.jsx)(n.p,{children:"ou"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:'var parameters = <String, String>{"flag": "true","country": "italy",};\nGet.toNamed("/profile/34954", parameters: parameters);\n'})}),"\n",(0,a.jsx)(n.p,{children:"Sur le deuxi\xe8me \xe9cran prendre les donn\xe9es par param\xe8tres comme d'habitude"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"print(Get.parameters['user']);\nprint(Get.parameters['flag']);\nprint(Get.parameters['country']);\n// out: 34954 true italy\n"})}),"\n",(0,a.jsx)(n.p,{children:"Et maintenant, tout ce que vous devez faire est d'utiliser Get. oNamed() pour naviguer sur vos routes nomm\xe9es, sans aucun contexte (vous pouvez appeler vos routes directement depuis votre classe BLoC ou Controller), et lorsque votre application est compil\xe9e sur le web, vos routes appara\xeetront dans l'url < 3"}),"\n",(0,a.jsx)(n.h3,{id:"middleware",children:"Middleware"}),"\n",(0,a.jsx)(n.p,{children:"Si vous voulez \xe9couter Recevoir des \xe9v\xe9nements pour d\xe9clencher des actions, vous pouvez utiliser routingCallback vers lui"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"GetMaterialApp(\n  routingCallback: (routing) {\n    if(routing.current == '/second'){\n      openAds();\n    }\n  }\n)\n"})}),"\n",(0,a.jsx)(n.p,{children:"Si vous n'utilisez pas GetMaterialApp, vous pouvez utiliser l'API manuelle pour attacher un observateur Middleware."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:'void main() {\n  runApp(\n    MaterialApp(\n      onGenerateRoute: Router.generateRoute,\n      initialRoute: "/",\n      navigatorKey: Get.key,\n      navigatorObservers: [\n        GetObserver(MiddleWare.observer), // HERE !!!\n      ],\n    ),\n  );\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"Cr\xe9er une classe MiddleWare"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"class MiddleWare {\n  static observer(Routing routing) {\n    /// You can listen in addition to the routes, the snackbars, dialogs and bottomsheets on each screen.\n    ///If you need to enter any of these 3 events directly here,\n    ///you must specify that the event is != Than you are trying to do.\n    if (routing.current == '/second' && !routing.isSnackbar) {\n      Get.snackbar(\"Hi\", \"You are on second route\");\n    } else if (routing.current =='/third'){\n      print('last route called');\n    }\n  }\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"Maintenant, utilisez Get on your code:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:'class First extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        leading: IconButton(\n          icon: Icon(Icons.add),\n          onPressed: () {\n            Get.snackbar("hi", "i am a modern snackbar");\n          },\n        ),\n        title: Text(\'First Route\'),\n      ),\n      body: Center(\n        child: ElevatedButton(\n          child: Text(\'Open route\'),\n          onPressed: () {\n            Get.toNamed("/second");\n          },\n        ),\n      ),\n    );\n  }\n}\n\nclass Second extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        leading: IconButton(\n          icon: Icon(Icons.add),\n          onPressed: () {\n            Get.snackbar("hi", "i am a modern snackbar");\n          },\n        ),\n        title: Text(\'second Route\'),\n      ),\n      body: Center(\n        child: ElevatedButton(\n          child: Text(\'Open route\'),\n          onPressed: () {\n            Get.toNamed("/third");\n          },\n        ),\n      ),\n    );\n  }\n}\n\nclass Third extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text("Third Route"),\n      ),\n      body: Center(\n        child: ElevatedButton(\n          onPressed: () {\n            Get.back();\n          },\n          child: Text(\'Go back!\'),\n        ),\n      ),\n    );\n  }\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"navigation-sans-contexte",children:"Navigation sans contexte"}),"\n",(0,a.jsx)(n.h3,{id:"snackbars",children:"SnackBars"}),"\n",(0,a.jsx)(n.p,{children:"Pour avoir un SnackBar simple avec Flutter, vous devez obtenir le contexte de l'\xe9chafaudage, ou vous devez utiliser une GlobalKey attach\xe9e \xe0 votre \xc9chafaudage"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"final snackBar = SnackBar(\n  content: Text('Hi!'),\n  action: SnackBarAction(\n    label: 'I am a old and ugly snackbar :(',\n    onPressed: (){}\n  ),\n);\n// Find the Scaffold in the widget tree and use\n// it to show a SnackBar.\nScaffold.of(context).showSnackBar(snackBar);\n"})}),"\n",(0,a.jsx)(n.p,{children:"Avec Get:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"Get.snackbar('Hi', 'i am a modern snackbar');\n"})}),"\n",(0,a.jsx)(n.p,{children:"Avec Get, tout ce que vous avez \xe0 faire est d'appeler votre Get.snackbar de n'importe o\xf9 dans votre code ou de le personnaliser comme vous le souhaitez !"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:'Get.snackbar(\n  "Hey i\'m a Get SnackBar!", // title\n  "It\'s unbelievable! I\'m using SnackBar without context, without boilerplate, without Scaffold, it is something truly amazing!", // message\n  icon: Icon(Icons.alarm),\n  shouldIconPulse: true,\n  onTap:(){},\n  barBlur: 20,\n  isDismissible: true,\n  duration: Duration(seconds: 3),\n);\n\n\n  ////////// ALL FEATURES //////////\n  //     Color colorText,\n  //     Duration duration,\n  //     SnackPosition snackPosition,\n  //     Widget titleText,\n  //     Widget messageText,\n  //     bool instantInit,\n  //     Widget icon,\n  //     bool shouldIconPulse,\n  //     double maxWidth,\n  //     EdgeInsets margin,\n  //     EdgeInsets padding,\n  //     double borderRadius,\n  //     Color borderColor,\n  //     double borderWidth,\n  //     Color backgroundColor,\n  //     Color leftBarIndicatorColor,\n  //     List<BoxShadow> boxShadows,\n  //     Gradient backgroundGradient,\n  //     TextButton mainButton,\n  //     OnTap onTap,\n  //     bool isDismissible,\n  //     bool showProgressIndicator,\n  //     AnimationController progressIndicatorController,\n  //     Color progressIndicatorBackgroundColor,\n  //     Animation<Color> progressIndicatorValueColor,\n  //     SnackStyle snackStyle,\n  //     Curve forwardAnimationCurve,\n  //     Curve reverseAnimationCurve,\n  //     Duration animationDuration,\n  //     double barBlur,\n  //     double overlayBlur,\n  //     Color overlayColor,\n  //     Form userInputForm\n  ///////////////////////////////////\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Si vous pr\xe9f\xe9rez le snackbar traditionnel, ou si vous voulez le personnaliser \xe0 partir de z\xe9ro, y compris en ajoutant une seule ligne (Get. nackbar utilise un titre et un message obligatoires), vous pouvez utiliser\n",(0,a.jsx)(n.code,{children:"Get.rawSnackbar();"})," qui fournit l'API RAW sur laquelle Get.snackbar a \xe9t\xe9 construit."]}),"\n",(0,a.jsx)(n.h3,{id:"dialogues",children:"Dialogues"}),"\n",(0,a.jsx)(n.p,{children:"Pour ouvrir la bo\xeete de dialogue :"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"Get.dialog(YourDialogWidget());\n"})}),"\n",(0,a.jsx)(n.p,{children:"Pour ouvrir la bo\xeete de dialogue par d\xe9faut :"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:'Get.defaultDialog(\n  onConfirm: () => print("Ok"),\n  middleText: "Dialog made in 3 lines of code"\n);\n'})}),"\n",(0,a.jsx)(n.p,{children:"Vous pouvez \xe9galement utiliser Get.generalDialog au lieu de showGeneralDialog."}),"\n",(0,a.jsx)(n.p,{children:"Pour tous les autres widgets de dialogue Flut, y compris les cupertinos, vous pouvez utiliser Get.overlayContext au lieu du contexte, et l'ouvrir n'importe o\xf9 dans votre code.\nPour les widgets qui n'utilisent pas Overlay, vous pouvez utiliser Get.context .\nCes deux contextes fonctionneront dans 99% des cas pour remplacer le contexte de votre interface utilisateur \xe0 l'exception des cas o\xf9 le Widget h\xe9rit\xe9 est utilis\xe9 sans contexte de navigation."}),"\n",(0,a.jsx)(n.h3,{id:"feuilles-en-bas",children:"Feuilles en bas"}),"\n",(0,a.jsx)(n.p,{children:"Get.bottomSheet est comme showModalBottomSheet, mais pas besoin de contexte."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"Get.bottomSheet(\n  Container(\n    child: Wrap(\n      children: <Widget>[\n        ListTile(\n          leading: Icon(Icons.music_note),\n          title: Text('Music'),\n          onTap: () {}\n        ),\n        ListTile(\n          leading: Icon(Icons.videocam),\n          title: Text('Video'),\n          onTap: () {},\n        ),\n      ],\n    ),\n  )\n);\n"})}),"\n",(0,a.jsx)(n.h2,{id:"navigation-imbriqu\xe9e",children:"Navigation imbriqu\xe9e"}),"\n",(0,a.jsx)(n.p,{children:"Rendez la navigation imbriqu\xe9e de Flutter encore plus facile.\nVous n'avez pas besoin du contexte, et vous trouverez votre pile de navigation par Id."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"REMARQUE : La cr\xe9ation de piles de navigation parall\xe8le peut \xeatre dangereuse. L'id\xe9al n'est pas d'utiliser NestedNavigators ou d'utiliser avec mod\xe9ration. Si votre projet l'exige, allez-y, mais gardez \xe0 l'esprit que garder plusieurs piles de navigation en m\xe9moire peut ne pas \xeatre une bonne id\xe9e pour la consommation de m\xe9moire."}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Voyez \xe0 quel point c'est simple :"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"Navigator(\n  key: Get.nestedKey(1), // create a key by index\n  initialRoute: '/',\n  onGenerateRoute: (settings) {\n    if (settings.name == '/') {\n      return GetPageRoute(\n        page: () => Scaffold(\n          appBar: AppBar(\n            title: Text(\"Main\"),\n          ),\n          body: Center(\n            child: TextButton(\n              color: Colors.blue,\n              onPressed: () {\n                Get.toNamed('/second', id:1); // navigate by your nested route by index\n              },\n              child: Text(\"Go to second\"),\n            ),\n          ),\n        ),\n      );\n    } else if (settings.name == '/second') {\n      return GetPageRoute(\n        page: () => Center(\n          child: Scaffold(\n            appBar: AppBar(\n              title: Text(\"Main\"),\n            ),\n            body: Center(\n              child:  Text(\"second\")\n            ),\n          ),\n        ),\n      );\n    }\n  }\n),\n"})})]})}function c(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>i});var a=t(7294);const r={},s=a.createContext(r);function i(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);